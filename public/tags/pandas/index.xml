<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas on ayeung.dev</title>
    <link>/tags/pandas/</link>
    <description>ayeung.dev (Pandas)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
      

      
    

    
    <lastBuildDate>Sat, 08 Jul 2017 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>⚡ Making pandas Operations Faster</title>
      <link>/2017/07/08/fast-pandas-operation.html</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/08/fast-pandas-operation.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt; is one of the most commonly used Python library in data analysis and machine learning. It is versatile and can be used to handle many different types of data. Before feeding a model with training data, one would most probably pre-process the data and perform feature extraction on data stored as pandas &lt;code&gt;DataFrame&lt;/code&gt;. I have been using pandas extensively in my work, and have recently discovered that the time required to manipulate data stored in a &lt;code&gt;DataFrame&lt;/code&gt; can vary hugely depending on the method you used.&lt;/p&gt;
&lt;h2 id=&#34;numerical-operations&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#numerical-operations&#34;&gt;
        #
    &lt;/a&gt;
    Numerical Operations
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;To demonstrate the differences, let&amp;rsquo;s generate some random data first. The following block of code will generate a &lt;code&gt;DataFrame&lt;/code&gt; with 5,000 rows and 3 columns (&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;) with values ranging from -10 to 10.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#ff6ac1&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;2&lt;/span&gt;]: &lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#ff6ac1&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;3&lt;/span&gt;]: data &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;10&lt;/span&gt;, (&lt;span style=&#34;color:#ff9f43&#34;&gt;5000&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;4&lt;/span&gt;]: df &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;DataFrame(data&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;data, columns&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;], index&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To track the time required to finish an operation, we can make use of the IPython magic function &lt;a href=&#34;https://ipython.org/ipython-doc/3/interactive/magics.html#magic-timeit&#34;&gt;&lt;code&gt;%timeit&lt;/code&gt;&lt;/a&gt; to measure the time required to execute a line in Python.&lt;/p&gt;
&lt;p&gt;To start with, let&amp;rsquo;s consider a simple task of creating a new column in the DataFrame, whose values depend on whether the sum of the values in other columns are greater than zero. First, let&amp;rsquo;s try using the &lt;code&gt;apply&lt;/code&gt; function of the DataFrame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;5&lt;/span&gt;]: &lt;span style=&#34;color:#ff6ac1&#34;&gt;%&lt;/span&gt;timeit df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#ff6ac1&#34;&gt;lambda&lt;/span&gt; x: &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; x[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;, axis&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;134&lt;/span&gt; ms &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;1.59&lt;/span&gt; ms per loop (mean &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#ff9f43&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ff9f43&#34;&gt;10&lt;/span&gt; loops each)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It takes about 134ms to finish the operation, which seems quite fast. However, if we take another approach by using numpy&amp;rsquo;s &lt;code&gt;where()&lt;/code&gt; function, we can actually be much faster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;6&lt;/span&gt;]: &lt;span style=&#34;color:#ff6ac1&#34;&gt;%&lt;/span&gt;timeit df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;where(df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;757&lt;/span&gt; µs &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;38.8&lt;/span&gt; µs per loop (mean &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#ff9f43&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ff9f43&#34;&gt;1000&lt;/span&gt; loops each)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is ~170 times faster! We can verified that the two methods actually give the same results as follows. (&lt;code&gt;np.any&lt;/code&gt; checks if any of the values in a list is &lt;code&gt;True&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;7&lt;/span&gt;]: np&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;any(df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;!=&lt;/span&gt; df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;string-operations&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#string-operations&#34;&gt;
        #
    &lt;/a&gt;
    String Operations
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;As another example, let&amp;rsquo;s try searching substrings in a column. Firstly, let&amp;rsquo;s generate some random text data in a new column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;8&lt;/span&gt;]: df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;choice([&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;pear&amp;#34;&lt;/span&gt;], &lt;span style=&#34;color:#ff9f43&#34;&gt;5000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s say we want to create a new column, whose values depend on whether Column &lt;code&gt;F&lt;/code&gt; contains the substring &lt;strong&gt;an&lt;/strong&gt;. Firstly, let&amp;rsquo;s try the &lt;code&gt;apply&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;9&lt;/span&gt;]: &lt;span style=&#34;color:#ff6ac1&#34;&gt;%&lt;/span&gt;timeit df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;apply(&lt;span style=&#34;color:#ff6ac1&#34;&gt;lambda&lt;/span&gt; x: &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;an&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; x[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;, axis&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;61.1&lt;/span&gt; ms &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;685&lt;/span&gt; µs per loop (mean &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#ff9f43&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ff9f43&#34;&gt;10&lt;/span&gt; loops each)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, if we use the second approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In [&lt;span style=&#34;color:#ff9f43&#34;&gt;10&lt;/span&gt;]: &lt;span style=&#34;color:#ff6ac1&#34;&gt;%&lt;/span&gt;timeit df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;where(df[&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;contains(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;an&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;2.65&lt;/span&gt; ms &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;40.9&lt;/span&gt; µs per loop (mean &lt;span style=&#34;color:#ff5c57&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#ff9f43&#34;&gt;7&lt;/span&gt; runs, &lt;span style=&#34;color:#ff9f43&#34;&gt;100&lt;/span&gt; loops each)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is ~30 times faster.&lt;/p&gt;
&lt;p&gt;The conclusion is that whenever we can operate on the whole column, we should avoid using &lt;code&gt;apply&lt;/code&gt;, which is looping over every row of the DataFrame, and is not able to take advantage of numpy vectorization when performing the calculation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
