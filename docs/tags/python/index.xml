<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ayeung.dev</title>
    <link>/tags/python/</link>
    <description>ayeung.dev (Python)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
      

      
    

    
    <lastBuildDate>Sun, 23 Feb 2025 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>🧩 Determining if a 15 Puzzle is solvable</title>
      <link>/2025/02/23/15-puzzble-solvability.html</link>
      <pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>/2025/02/23/15-puzzble-solvability.html</guid>
      <description>&lt;p&gt;I recently became interested in how we can programmatically solve the 15 puzzle. The 15 puzzle is a sliding puzzle that consists of a 4 x 4 board of tiles numbered from 1 to 15, with one empty space. The tiles are shuffled and the goal is to slide the tiles around until they are in order, i.e. the numbered tiles will run from 1 to 15 starting from the top left corner from left to right and top to bottom, with the empty space at the bottom right corner.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# A shuffled 15 puzzle
┌───┬───┬───┬───┐
│ 2 │ 8 │ 3 │ 4 │
├───┼───┼───┼───┤
│ 1 │ 6 │   │ 7 │
├───┼───┼───┼───┤
│ 5 │ 9 │ 11│ 12│   
├───┼───┼───┼───┤
│ 13│ 10│ 15│ 14│
└───┴───┴───┴───┘


# The target state of the 15 puzzle
┌───┬───┬───┬───┐
│ 1 │ 2 │ 3 │ 4 │
├───┼───┼───┼───┤
│ 5 │ 6 │ 7 │ 8 │
├───┼───┼───┼───┤
│ 9 │ 10│ 11│ 12│   
├───┼───┼───┼───┤
│ 13│ 14│ 15│   │
└───┴───┴───┴───┘
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;solvability-of-the-15-puzzle&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#solvability-of-the-15-puzzle&#34;&gt;
        #
    &lt;/a&gt;
    Solvability of the 15 puzzle
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;It is interesting to note that not all configurations of the 15 puzzle are solvable. In other words, give a certain arrangement of the numbered tiles on the board, it may not be possible to arrange the tiles in order by only sliding them around. It turns out that out of the &lt;code&gt;16! = 20,922,789,888,000&lt;/code&gt; (about 21 trillion) possible configurations, only &lt;strong&gt;half of them&lt;/strong&gt; are solvable.&lt;/p&gt;
&lt;p&gt;Writing a program to determine whether a certain configuration is solvable is easy. Ask ChatGPT about it and it will give you a snippet that works out of the box. But here let&amp;rsquo;s take a look at the details and try to understand how it works.&lt;/p&gt;
&lt;h3 id=&#34;permutations&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#permutations&#34;&gt;
        ##
    &lt;/a&gt;
    Permutations
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Mathematically, the 15 puzzle can be represented as a permutation of the numbers from 1 to 15 (or 16 if we include the blank space). A &lt;a href=&#34;https://en.wikipedia.org/wiki/Permutation&#34;&gt;permutation&lt;/a&gt; is an arrangement of objects in a specific order. For example, the permutation &lt;code&gt;(2, 1, 3)&lt;/code&gt; represents a specific arrangement of the numbers 1, 2, and 3.&lt;/p&gt;
&lt;p&gt;Given a set of elements (e.g. 1, 2, 3), a permutation can be changed into another permutation by a sequence of swapping pairs of elements (called &lt;strong&gt;transpositions&lt;/strong&gt;). For example: we can change the permutation &lt;code&gt;(1, 2, 3)&lt;/code&gt; into &lt;code&gt;(2, 1, 3)&lt;/code&gt; by swapping the first two elements, i.e. performing a transposition of 1 and 2. Hence, to solve the 15 puzzle, we need to find a sequence of transpositions that will transform the initial permutation into the target permutation (with some restrictions of course, because we cannot simply exchange any two tiles).&lt;/p&gt;
&lt;h3 id=&#34;parity-of-permutations&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#parity-of-permutations&#34;&gt;
        ##
    &lt;/a&gt;
    Parity of Permutations
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;When moving from one permutation to another, it either involves an &lt;strong&gt;even&lt;/strong&gt; or &lt;strong&gt;odd&lt;/strong&gt; number of transpositions. This is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Parity_of_a_permutation&#34;&gt;parity of a permutation&lt;/a&gt;. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From &lt;code&gt;(1, 2, 3)&lt;/code&gt; to &lt;code&gt;(2, 1, 3)&lt;/code&gt; requires one transposition (swapping 1 and 2) &amp;ndash;&amp;gt; &lt;strong&gt;odd&lt;/strong&gt; parity&lt;/li&gt;
&lt;li&gt;From &lt;code&gt;(1, 2, 3)&lt;/code&gt; to &lt;code&gt;(3, 2, 1)&lt;/code&gt; requires two transpositions (swapping 1 and 3, then 2 and 3). &amp;ndash;&amp;gt; &lt;strong&gt;even&lt;/strong&gt; parity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although there can be multiple sequence of transpositions that can transform one permutation to another, the parity of the number of transpositions will be the same. For example, from &lt;code&gt;(1, 2, 3)&lt;/code&gt; to &lt;code&gt;(3, 2, 1)&lt;/code&gt; we can swap 1 and 3 first, then 2 and 3, or we can swap 2 and 3 first, then 1 and 3.&lt;/p&gt;
&lt;h3 id=&#34;inversions&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#inversions&#34;&gt;
        ##
    &lt;/a&gt;
    Inversions
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;It turns out that this concept of parity of permutations is crucial in determining whether a given configuration of the 15 puzzle is solvable or not. But before going back to the 15 puzzle, let&amp;rsquo;s talk about the concept of &lt;strong&gt;inversions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we have an ordering of the set of elements involved in a permutation. In the case of the 15 puzzle, we can order the numbers from 1 to 16 (including the blank space) in ascending order (which is also the target state of the puzzle). We would like to know if a certain permutation (arrangement of the numbers) is of even or odd parity. This is equivalent to asking the question of whether we need an even or odd number of transpositions to move from the initial permutation to the target permutation.&lt;/p&gt;
&lt;p&gt;If the number of elements is small, or the permutation is not too different from the target permutation, it would be relatively easy to tell. For example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Given  : ( 1, 2, 3, 4, 5)
Target : ( 2, 1, 5, 4, 3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this case, we can see that we need to swap 1 and 2, and 3 and 5. This requires two transpositions, which is an even number. Hence, the permutation is of even parity.&lt;/p&gt;
&lt;p&gt;However, if the number of elements is large, or the permutation is very different from the target permutation, it would be difficult to tell just by looking at it. It turns out that we can rely on the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_(discrete_mathematics)&#34;&gt;inversions&lt;/a&gt; to determine the parity of a permutation. An inversion is a pair of elements &lt;code&gt;(i, j)&lt;/code&gt; such that &lt;code&gt;i &amp;lt; j&lt;/code&gt; but &lt;code&gt;i&lt;/code&gt; appears after &lt;code&gt;j&lt;/code&gt; in the permutation. For example, in the permutation &lt;code&gt;(2, 4, 1, 3)&lt;/code&gt; the pair &lt;code&gt;(2, 1)&lt;/code&gt;, &lt;code&gt;(4, 1)&lt;/code&gt; and &lt;code&gt;(4, 3)&lt;/code&gt; are inversions.&lt;/p&gt;
&lt;p&gt;The number of inversions in a permutation is directly related to the parity of the permutation. If the number of inversions is even, the permutation is of even parity. If the number of inversions is odd, the permutation is of odd parity.&lt;/p&gt;
&lt;p&gt;Programmatically, the number of inversions in a permutation can be calculated by iterating over all pairs of elements and counting the number of inversions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;count_inversions&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inversions &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                inversions &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; inversions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;count_inversions&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Output: 3  (because there are two inversions: (2, 1), (4, 1), (4, 3))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;parity-and-solvability-of-the-15-puzzle&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#parity-and-solvability-of-the-15-puzzle&#34;&gt;
        ##
    &lt;/a&gt;
    Parity and Solvability of the 15 Puzzle
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;So, how does the concept of parity and inversion help us determine if a given configuration of the 15 puzzle is solvable? As mentioned above, solving the 15 puzzle is equivalent to transforming the initial permutation into the target permutation. It turns out that the number of inversions in the initial permutation is crucial.&lt;/p&gt;
&lt;p&gt;To understand how parity or the number of inversions helps us determine solvability, let&amp;rsquo;s consider the following board.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Current state:
┌───┬───┬───┬───┐
│ 2 │ 8 │ 3 │ 4 │
├───┼───┼───┼───┤
│ 1 │ 6 │ 14│ 5 │
├───┼───┼───┼───┤
│ 7 │ 9 │ 11│ 12│
├───┼───┼───┼───┤
│ 13│ 10│ 15│   │
└───┴───┴───┴───┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order to convert this board into the target state, we need to swap tiles around. However, we can only do so by sliding tiles into the empty space or, in other words, by &amp;ldquo;moving&amp;rdquo; the empty space around.&lt;/p&gt;
&lt;p&gt;Note that in the end the empty space should still be at the bottom right corner of the board. We can easily see that in order for the empty space to move around and finally get back to the bottom right corner, the number of swapping happened must be &lt;strong&gt;even&lt;/strong&gt;. Hence, assuming that after a number of moves we finally get to the target state, we will always have an even number of moves. This is true for any configuration of the board with the empty space at the bottom right corner.&lt;/p&gt;
&lt;p&gt;What this analysis follows is that: for all configuration of the board with the empty space at the bottom right corner, the permutation of the numbers must be of &lt;strong&gt;even parity&lt;/strong&gt;. This is because these configurations are all created by starting from the target state in which the empty space is also at the bottom right corner.&lt;/p&gt;
&lt;p&gt;Consider the following configuration of the board:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌───┬───┬───┬───┐
│ 1 │ 2 │ 3 │ 4 │
├───┼───┼───┼───┤
│ 5 │ 6 │ 7 │ 8 │
├───┼───┼───┼───┤
│ 9 │ 10│ 11│ 12│   
├───┼───┼───┼───┤
│ 13│ 15│ 14│   │
└───┴───┴───┴───┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in which only the tiles &lt;code&gt;14&lt;/code&gt; and &lt;code&gt;15&lt;/code&gt; are swapped. In this case, the parity of this permutation is 1, which is odd. Thus, this is an unsolvable configuration, as it is not possible to reach this configuration from the target state by simply sliding the tiles around.&lt;/p&gt;
&lt;p&gt;This would become obvious if we consider a 2 x 2 board instead of a 4 x 4 board. For example, the following is a configuration with odd parity (since the number of inversions is 1):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌───┬───┐
│ 2 │ 1 │
├───┼───┤
│ 3 │   │
└───┴───┘
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can easily see that there&amp;rsquo;s no way to solve this puzzle by sliding the tiles around.&lt;/p&gt;
&lt;h3 id=&#34;distance-of-the-empty-space-from-the-bottom-right-corner&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#distance-of-the-empty-space-from-the-bottom-right-corner&#34;&gt;
        ##
    &lt;/a&gt;
    Distance of the Empty Space from the Bottom Right Corner
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;But wait, what happen when the empty space is NOT at the bottom right corner? This is actually a trivial extension to the problem above. This is because given any configuration, we can always &amp;ldquo;move&amp;rdquo; the empty space to the bottom right corner by sliding the tiles around.&lt;/p&gt;
&lt;p&gt;To determine if any configuration is solvable, we can do one of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move the empty space to the bottom right corner, and then check whether the parity of the permutation of the numbers is even.&lt;/li&gt;
&lt;li&gt;Check whether the sum of the following two numbers is even:
&lt;ul&gt;
&lt;li&gt;The number of inversions in the permutation of the numbers&lt;/li&gt;
&lt;li&gt;The number of moves required to move the empty space to the bottom right corner&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second method is more efficient because it avoids the need to actually move the empty space around. The number of moves required to move the empty space to the bottom right corner can be known by checking the &lt;a href=&#34;https://en.wikipedia.org/wiki/Taxicab_geometry&#34;&gt;Manhattan distance&lt;/a&gt; (or taxicab distance) of the empty space from the bottom right corner.&lt;/p&gt;
&lt;h3 id=&#34;summing-up&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#summing-up&#34;&gt;
        ##
    &lt;/a&gt;
    Summing Up
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Given the above discussions, we can now write a function to determine whether a given configuration of the 15 puzzle is solvable or not. The function will take a list of numbers representing the configuration of the board, and return &lt;code&gt;True&lt;/code&gt; if the configuration is solvable, and &lt;code&gt;False&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;is_solvable&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;board&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; empty_space_num&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    Assuming `board` is a list of 16 numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    representing the configuration of the 15 puzzle board.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Count the number of inversions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;count_inversions&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        inversions &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    inversions &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; inversions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Get the Manhattan distance of the empty space from the bottom right corner&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;manhattan_distance&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;board&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        empty_space_index &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; board&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;empty_space_num&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        empty_space_row &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; empty_space_index &lt;span style=&#34;color:#81a1c1&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        empty_space_col &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; empty_space_index &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; empty_space_row &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; empty_space_col
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    num_inversions &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; count_inversions&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;board&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    distance &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; manhattan_distance&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;board&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Check if the sum of the number of inversions and the distance is even&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;num_inversions &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; distance&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Solvable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;board &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;is_solvable&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;board&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Output: True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Unsolvable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;board &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;is_solvable&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;board&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Output: False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also generalize this to any size of the board, not just the 4 x 4 board, or even to different requirements (e.g. the empty space needs to be at the top left corner in the target state). But this should give you a good idea of how to determine the solvability of the 15 puzzle.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#whats-next&#34;&gt;
        #
    &lt;/a&gt;
    What&amp;rsquo;s Next?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Determining whether a given configuration of the 15 puzzle is solvable is the first step in solving the puzzle programmatically. The next step would be to implement an algorithm to find the sequence of moves that will transform the initial configuration into the target configuration. Two algorithms are commonly used: the &lt;a href=&#34;https://en.wikipedia.org/wiki/A*_search_algorithm&#34;&gt;A* search algorithm&lt;/a&gt; and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Iterative_deepening_A*&#34;&gt;IDA* algorithm&lt;/a&gt;. I will try to cover these in another post.&lt;/p&gt;
&lt;h2 id=&#34;references&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#references&#34;&gt;
        #
    &lt;/a&gt;
    References
&lt;/div&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jstor.org/stable/2369492&#34;&gt;Notes on the &amp;ldquo;15&amp;rdquo; Puzzle&lt;/a&gt; by Johnson and Story, 1879 in &lt;em&gt;American Journal of Mathematics&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mohamedrezk122.github.io/fifteen-puzzle&#34;&gt;The Fifteen Puzzle&lt;/a&gt; by Mohamed El Shorbagy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mathworld.wolfram.com/15Puzzle.html&#34;&gt;15 Puzzle &amp;ndash; from Wolfram MathWorld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>🪐 pyenv, virtualenv and using them with Jupyter</title>
      <link>/2020/08/17/pyenv-jupyter.html</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/08/17/pyenv-jupyter.html</guid>
      <description>&lt;p&gt;It is common that the different projects you are working on depend on &lt;strong&gt;different versions of Python&lt;/strong&gt;. That is why &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; becomes very handy for Python developers, as it lets you switch between different Python versions easily. With &lt;a href=&#34;https://github.com/pyenv/pyenv-virtualenv&#34;&gt;pyenv-virtualenv&lt;/a&gt; it can also be used together with &lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34;&gt;virtualenv&lt;/a&gt; to create isolated development environments for different projects with different dependencies.&lt;/p&gt;
&lt;p&gt;For example, if some of the projects you are working on requires Tensorflow 1.15, while your system&amp;rsquo;s Python is of version 3.8, you must find some ways to install Python 3.7 in order to work on your project, as Tensorflow 1.15 can only be run in Python 3.5 to Python 3.7.&lt;/p&gt;
&lt;p&gt;This article aims at giving a quick introduction to pyenv and pyenv-virtualenv, as well as describing how one can easily create new kernels of virtual environments in &lt;a href=&#34;https://jupyter.org/&#34;&gt;Jupyter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;installing-and-using-pyenv&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#installing-and-using-pyenv&#34;&gt;
        #
    &lt;/a&gt;
    Installing and Using pyenv
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;pyenv works on macOS and Linux, but not Windows (except inside the Windows Subsystem for Linux). Windows users might want to check out &lt;a href=&#34;https://github.com/pyenv-win/pyenv-win&#34;&gt;pyenv-win&lt;/a&gt; for further information.&lt;/p&gt;
&lt;p&gt;On macOS, it can be installed using Homebrew:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install pyenv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On both macOS and Linux, it can also be installed by checking out the latest version of pyenv. For details of installing pyenv this way, refer to the offical installation guidelines here: &lt;a href=&#34;https://github.com/pyenv/pyenv#installation&#34;&gt;https://github.com/pyenv/pyenv#installation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After installation, add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; (or &lt;code&gt;.zshrc&lt;/code&gt;) file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv init -&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you have pyenv installed, you can do a few things like below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing a Python version&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# List all available Python versions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv install --list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Install a specific Python version (3.7.8)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv install 3.7.8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# List Python version installed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* system &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;set&lt;/span&gt; by /Users/....&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3.7.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Setting a local Python version&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Set the Python version for the current directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv &lt;span style=&#34;color:#81a1c1&#34;&gt;local&lt;/span&gt; 3.7.8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Now by default you will be using Python 3.7.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python 3.7.8 &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;default, Aug &lt;span style=&#34;color:#b48ead&#34;&gt;17&lt;/span&gt; 2020, 11:05:21&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Unset it and change back to system default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv &lt;span style=&#34;color:#81a1c1&#34;&gt;local&lt;/span&gt; --unset
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Setting a global Python version&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Install a new version and set it as system default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv install 2.7.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv global 2.7.6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Now you have 2.7.6 as the default Python version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python 2.7.6 &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;default, Aug &lt;span style=&#34;color:#b48ead&#34;&gt;17&lt;/span&gt; 2020, 11:08:23&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-virtualenv-with-pyenv&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#using-virtualenv-with-pyenv&#34;&gt;
        #
    &lt;/a&gt;
    Using virtualenv with pyenv
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;pyenv by itself only allows you to switch between different Python versions. To create an isolated environment with a set of dependencies, we will need &lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34;&gt;virtualenv&lt;/a&gt; too. You can follow the steps below to set up your computer to use pyenv and virtualenv together.&lt;/p&gt;
&lt;p&gt;Firstly, we need ot install virtualenv:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip3 install virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip3 install virtualenvwrapper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need to install pyenv-virtualenv. This can be done on macOS by using brew as follows (or follow the instructions on &lt;a href=&#34;https://github.com/pyenv/pyenv-virtualenv&#34;&gt;this page&lt;/a&gt; if you are not using macOS):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install pyenv-virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, add the following line to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;$(&lt;/span&gt;pyenv virtualenv-init -&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you are done with the steps above, you can create new virtual environments as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Install a new Python version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv install 3.7.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Create a new virtualenv named myenv with Python 3.7.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv virtualenv 3.7.4 tf1.15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Go to the project directory, and set its local environment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;cd&lt;/span&gt; ~/repo/my-project
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv &lt;span style=&#34;color:#81a1c1&#34;&gt;local&lt;/span&gt; tf1.15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Install dependencies as needed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip3 install tensorflow&lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt;1.15
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;adding-kernels-to-jupyter&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#adding-kernels-to-jupyter&#34;&gt;
        #
    &lt;/a&gt;
    Adding Kernels to Jupyter
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;It is also common that we use Jupyter for quick prototyping and testing. It would be convenient if we can invoke different virtual environments in Jupyter to test our source codes. In fact, it is very easy to create new kernels of different virtual environments in Jupyter.&lt;/p&gt;
&lt;p&gt;Firstly, you have to check the paths of your Juypyter installation. (Note that it does not matter which environment you are using to run your Jupyter notebook or Jupyter lab.) You can check the paths using the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ jupyter --paths
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On my computer, it is something like below. What we need to note here is the &lt;code&gt;data&lt;/code&gt; path.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /Users/albert/.jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /usr/local/Cellar/python@3.8/3.8.4/Frameworks/Python.framework/Versions/3.8/etc/jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /usr/local/etc/jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /etc/jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /Users/albert/Library/Jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /usr/local/Cellar/python@3.8/3.8.4/Frameworks/Python.framework/Versions/3.8/share/jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /usr/local/share/jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /usr/share/jupyter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runtime:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    /Users/ayeung/Library/Jupyter/runtime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we will need to check the path to the Python interpreter of the virtual environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Activate your virtualenv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv activate tf1.15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Check path of the Python interpreter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv which python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/Users/albert/.pyenv/versions/tf1.15/bin/python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Deactivate the virtualenv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pyenv deactivate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we create a new folder under the &lt;code&gt;kernels&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir /User/albert/Library/Jupyter/kernels/tf1.15
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and add a new file named &lt;code&gt;kernel.json&lt;/code&gt; in that directory with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;argv&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/User/albert/.pyenv/versions/tf1.15/bin/python&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;-m&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;ipykernel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;-f&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{connection_file}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;display_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;tf1.15&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is done, you will be able to use the kernel in Jupyter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>🤖 Mastering BERT Tokenization and Encoding</title>
      <link>/2020/06/19/bert-tokenization.html</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/19/bert-tokenization.html</guid>
      <description>&lt;p&gt;To use a pre-trained BERT model, we need to convert the input data into an appropriate format so that each sentence can be sent to the pre-trained model to obtain the corresponding embedding. This article introduces how this can be done using modules and functions available in Hugging Face&amp;rsquo;s &lt;code&gt;transformers&lt;/code&gt; package (&lt;a href=&#34;https://huggingface.co/transformers/index.html&#34;&gt;https://huggingface.co/transformers/index.html&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;input-representation-in-bert&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#input-representation-in-bert&#34;&gt;
        #
    &lt;/a&gt;
    Input Representation in BERT
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s first try to understand how an input sentence should be represented in BERT. BERT embeddings are trained with two training tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Classification Task&lt;/strong&gt;: to determine which category the input sentence should fall into&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Next Sentence Prediction Task&lt;/strong&gt;: to determine if the second sentence naturally follows the first sentence.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;the-cls-and-sep-tokens&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#the-cls-and-sep-tokens&#34;&gt;
        ##
    &lt;/a&gt;
    The &lt;code&gt;[CLS]&lt;/code&gt; and &lt;code&gt;[SEP]&lt;/code&gt; Tokens
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;For the classification task, a &lt;strong&gt;single&lt;/strong&gt; vector representing the whole input sentence is needed to be fed to a classifier. In BERT, the decision is that the hidden state of the &lt;strong&gt;first token&lt;/strong&gt; is taken to represent the whole sentence. To achieve this, an additional token has to be added manually to the input sentence. In the original implementation, the token &lt;code&gt;[CLS]&lt;/code&gt; is chosen for this purpose.&lt;/p&gt;
&lt;p&gt;In the &amp;ldquo;next sentence prediction&amp;rdquo; task, we need a way to inform the model where does the &lt;strong&gt;first sentence end&lt;/strong&gt;, and where does the &lt;strong&gt;second sentence begin&lt;/strong&gt;. Hence, another artificial token, &lt;code&gt;[SEP]&lt;/code&gt;, is introduced. If we are trying to train a classifier, each input sample will contain only one sentence (or a single text input). In that case, the &lt;code&gt;[SEP]&lt;/code&gt; token will be added to the end of the input text.&lt;/p&gt;
&lt;p&gt;In summary, to preprocess the input text data, the first thing we will have to do is to add the &lt;code&gt;[CLS]&lt;/code&gt; token at the beginning, and the &lt;code&gt;[SEP]&lt;/code&gt; token at the end of each input text.&lt;/p&gt;
&lt;h3 id=&#34;padding-token-pad&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#padding-token-pad&#34;&gt;
        ##
    &lt;/a&gt;
    Padding Token &lt;code&gt;[PAD]&lt;/code&gt;
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;The BERT model receives a fixed length of sentence as input. Usually the maximum length of a sentence depends on the data we are working on. For sentences that are shorter than this maximum length, we will have to add paddings (empty tokens) to the sentences to make up the length. In the original implementation, the token &lt;code&gt;[PAD]&lt;/code&gt; is used to represent paddings to the sentence.&lt;/p&gt;
&lt;h3 id=&#34;converting-tokens-to-ids&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#converting-tokens-to-ids&#34;&gt;
        ##
    &lt;/a&gt;
    Converting Tokens to IDs
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;When the BERT model was trained, each token was given a &lt;strong&gt;unique ID&lt;/strong&gt;. Hence, when we want to use a pre-trained BERT model, we will first need to convert each token in the input sentence into its corresponding unique IDs.&lt;/p&gt;
&lt;p&gt;There is an important point to note when we use a pre-trained model. Since the model is pre-trained on a certain corpus, the &lt;strong&gt;vocabulary&lt;/strong&gt; was also fixed. In other words, when we apply a pre-trained model to some other data, it is possible that some tokens in the new data might not appear in the fixed vocabulary of the pre-trained model. This is commonly known as the &lt;strong&gt;out-of-vocabulary (OOV)&lt;/strong&gt; problem.&lt;/p&gt;
&lt;p&gt;For tokens not appearing in the original vocabulary, it is designed that they should be replaced with a special token &lt;code&gt;[UNK]&lt;/code&gt;, which stands for &lt;strong&gt;unknown&lt;/strong&gt; token.&lt;/p&gt;
&lt;p&gt;However, converting all unseen tokens into &lt;code&gt;[UNK]&lt;/code&gt; will take away a lot of information from the input data. Hence, BERT makes use of a &lt;strong&gt;WordPiece&lt;/strong&gt; algorithm that breaks a word into several &lt;em&gt;subwords&lt;/em&gt;, such that commonly seen subwords can also be represented by the model.&lt;/p&gt;
&lt;p&gt;For example, the word &lt;code&gt;characteristically&lt;/code&gt; does not appear in the original vocabulary. Nevertheless, when we use the BERT tokenizer to tokenize a sentence containing this word, we get something as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;transformers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; BertTokenizer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; tz &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; BertTokenizer&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;from_pretrained&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bert-base-cased&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; tz&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;convert_tokens_to_ids&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;characteristically&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sent &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;He remains characteristically confident and optimistic.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; tz&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;tokenize&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;sent&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;He&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;remains&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;characteristic&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;##ally&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;confident&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;and&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;optimistic&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; tz&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;convert_tokens_to_ids&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tz&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;tokenize&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;sent&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1124&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2606&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;7987&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2716&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9588&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1105&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;24876&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;119&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that the word &lt;code&gt;characteristically&lt;/code&gt; will be converted to the ID &lt;code&gt;100&lt;/code&gt;, which is the ID of the token &lt;code&gt;[UNK]&lt;/code&gt;, if we do not apply the tokenization function of the BERT model.&lt;/p&gt;
&lt;p&gt;The BERT tokenization function, on the other hand, will first breaks the word into two subwoards, namely &lt;code&gt;characteristic&lt;/code&gt; and &lt;code&gt;##ally&lt;/code&gt;, where the first token is a more commonly-seen word (prefix) in a corpus, and the second token is prefixed by two hashes &lt;code&gt;##&lt;/code&gt; to indicate that it is a suffix following some other subwords.&lt;/p&gt;
&lt;p&gt;After this tokenization step, all tokens can be converted into their corresponding IDs.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#summary&#34;&gt;
        ##
    &lt;/a&gt;
    Summary
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;In summary, an input sentence for a &lt;strong&gt;classification task&lt;/strong&gt; will go through the following steps before being fed into the BERT model.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tokenization: breaking down of the sentence into tokens&lt;/li&gt;
&lt;li&gt;Adding the &lt;code&gt;[CLS]&lt;/code&gt; token at the beginning of the sentence&lt;/li&gt;
&lt;li&gt;Adding the &lt;code&gt;[SEP]&lt;/code&gt; token at the end of the sentence&lt;/li&gt;
&lt;li&gt;Padding the sentence with &lt;code&gt;[PAD]&lt;/code&gt; tokens so that the total length equals to the maximum length&lt;/li&gt;
&lt;li&gt;Converting each token into their corresponding IDs in the model&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example of preparing a sentence for input to the BERT model is shown below. For simplicity, we assume the maximum length is 10 in the example below (while in the original model it is set to be 512).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;# Original Sentence
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;&lt;/span&gt;Let&amp;#39;s learn deep learning!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;# Tokenized Sentence
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;&lt;/span&gt;[&amp;#39;Let&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;s&amp;#39;, &amp;#39;learn&amp;#39;, &amp;#39;deep&amp;#39;, &amp;#39;learning&amp;#39;, &amp;#39;!&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;# Adding [CLS] and [SEP] Tokens
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;&lt;/span&gt;[&amp;#39;[CLS]&amp;#39;, &amp;#39;Let&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;s&amp;#39;, &amp;#39;learn&amp;#39;, &amp;#39;deep&amp;#39;, &amp;#39;learning&amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;[SEP]&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;# Padding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;&lt;/span&gt;[&amp;#39;[CLS]&amp;#39;, &amp;#39;Let&amp;#39;, &amp;#34;&amp;#39;&amp;#34;, &amp;#39;s&amp;#39;, &amp;#39;learn&amp;#39;, &amp;#39;deep&amp;#39;, &amp;#39;learning&amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;[SEP]&amp;#39;, &amp;#39;[PAD]&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;# Converting to IDs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0;font-weight:bold&#34;&gt;&lt;/span&gt;[101, 2421, 112, 188, 3858, 1996, 3776, 106, 102, 0]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tokenization-using-the-transformers-package&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#tokenization-using-the-transformers-package&#34;&gt;
        #
    &lt;/a&gt;
    Tokenization using the transformers Package
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;While there are quite a number of steps to transform an input sentence into the appropriate representation, we can use the functions provided by the &lt;code&gt;transformers&lt;/code&gt; package to help us perform the tokenization and transformation easily. In particular, we can use the function &lt;code&gt;encode_plus&lt;/code&gt;, which does the following in one go:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tokenize the input sentence&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;[CLS]&lt;/code&gt; and &lt;code&gt;[SEP]&lt;/code&gt; tokens.&lt;/li&gt;
&lt;li&gt;Pad or truncate the sentence to the maximum length allowed&lt;/li&gt;
&lt;li&gt;Encode the tokens into their corresponding IDs
Pad or truncate all sentences to the same length.&lt;/li&gt;
&lt;li&gt;Create the attention masks which explicitly differentiate real tokens from &lt;code&gt;[PAD]&lt;/code&gt; tokens&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following codes shows how this can be done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Import tokenizer from transformers package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;transformers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; BertTokenizer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Load the tokenizer of the &amp;#34;bert-base-cased&amp;#34; pretrained model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# See https://huggingface.co/transformers/pretrained_models.html for other models&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tz &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; BertTokenizer&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;from_pretrained&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bert-base-cased&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# The senetence to be encoded&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sent &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Let&amp;#39;s learn deep learning!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Encode the sentence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encoded &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tz&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;encode_plus&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;sent&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# the sentence to be encoded&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_special_tokens&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Add [CLS] and [SEP]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_length &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# maximum length of a sentence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pad_to_max_length&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Add [PAD]s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return_attention_mask &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Generate the attention mask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return_tensors &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;pt&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# ask the function to return PyTorch tensors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Get the input IDs and attention mask in tensor format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input_ids &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; encoded&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;input_ids&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attn_mask &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; encoded&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;attention_mask&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After executing the codes above, we will have the following content for the &lt;code&gt;input_ids&lt;/code&gt; and &lt;code&gt;attn_mask&lt;/code&gt; variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;ids
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tensor&lt;span style=&#34;color:#eceff4&#34;&gt;([[&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;101&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2421&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;112&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;188&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3858&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1996&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3776&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;106&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; attn_mask
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tensor&lt;span style=&#34;color:#eceff4&#34;&gt;([[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;&amp;ldquo;attention mask&amp;rdquo;&lt;/strong&gt; tells the model which tokens should be attended to and which (the &lt;code&gt;[PAD]&lt;/code&gt; tokens) should not (see the &lt;a href=&#34;https://huggingface.co/transformers/glossary.html#attention-mask&#34;&gt;documentation&lt;/a&gt; for more detail). It will be needed when we feed the input into the BERT model.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#reference&#34;&gt;
        #
    &lt;/a&gt;
    Reference
&lt;/div&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Devlin et al. 2018. &lt;a href=&#34;https://arxiv.org/abs/1810.04805&#34;&gt;BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BERT - transformers documentation: &lt;a href=&#34;https://huggingface.co/transformers/model_doc/bert.html&#34;&gt;https://huggingface.co/transformers/model_doc/bert.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>🌟 Implementing Trie in Python</title>
      <link>/2020/06/15/python-trie.html</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/15/python-trie.html</guid>
      <description>&lt;p&gt;&lt;strong&gt;Trie&lt;/strong&gt; is a very useful data structure. It is commonly used to represent a dictionary for looking up words in a vocabulary.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-trie&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#what-is-a-trie&#34;&gt;
        #
    &lt;/a&gt;
    What is a Trie?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Consider the task of implementing a search bar with &lt;strong&gt;auto-completion&lt;/strong&gt; or &lt;strong&gt;query suggestion&lt;/strong&gt;. When the user enters a query, the search bar will automatically suggests common queries &lt;strong&gt;starting with&lt;/strong&gt; the characters input by the user.&lt;/p&gt;
&lt;p&gt;To implement such a function, we need several things at the backend. The first, obviously, is a list of common queries. Or it can be a list of proper English words for the purpose of auto-completion). Secondly, we will need to have an algorithm to &lt;strong&gt;quickly&lt;/strong&gt; look up words starting with the characters input by the user, and this is where we need to use the trie data structure.&lt;/p&gt;
&lt;p&gt;The follow example illustrates why a special data structure is necessary to look up words &lt;strong&gt;quickly&lt;/strong&gt; given a &lt;strong&gt;prefix&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user inputs the characters &lt;code&gt;en&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In our dictionary, we have the following words starting with &lt;code&gt;en&lt;/code&gt;: &lt;code&gt;english&lt;/code&gt;, &lt;code&gt;entertainment&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commonly used data structures such as &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;dictionary&lt;/code&gt; in Python do not allow quick look up of elements stored inside. For example, to see if there is any word having the prefix &lt;code&gt;en&lt;/code&gt; in a Python dictionary, we cannot avoid going through each of the keys, resulting in &lt;code&gt;O(n)&lt;/code&gt; time, where &lt;code&gt;n&lt;/code&gt; is the number of entries in the dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Trie&lt;/strong&gt; is a tree-like data structure made up of nodes. Nodes can be used to store data. Each node may have none, one or more children. When used to store a vocabulary, &lt;strong&gt;each node is used to store a character&lt;/strong&gt;, and consequently each &amp;ldquo;branch&amp;rdquo; of the trie represents a unique word. The following figure shows a trie with five words (&lt;code&gt;was&lt;/code&gt;, &lt;code&gt;wax&lt;/code&gt;, &lt;code&gt;what&lt;/code&gt;, &lt;code&gt;word&lt;/code&gt;, &lt;code&gt;work&lt;/code&gt;) stored in it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/trie_example.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-does-a-trie-work&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#how-does-a-trie-work&#34;&gt;
        #
    &lt;/a&gt;
    How does a Trie Work?
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;There are two major operations that can be performed on a trie, namely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inserting a word into the trie&lt;/li&gt;
&lt;li&gt;Searching for words using a prefix&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both operations involves traversing the trie by starting from the root node. We take a look at each of these operations in more detail.&lt;/p&gt;
&lt;h3 id=&#34;inserting-words-into-the-trie&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#inserting-words-into-the-trie&#34;&gt;
        ##
    &lt;/a&gt;
    Inserting Words into the Trie
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;In order to insert a new word into the trie, we need to first check whether any prefix of the word is already in the trie. Therefore, we will start traverse the trie from the root node, and follow the algorithm below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the current node to be the root node&lt;/li&gt;
&lt;li&gt;Set the current character as the first character of the input word&lt;/li&gt;
&lt;li&gt;Check if the current character is a child of the current node
&lt;ul&gt;
&lt;li&gt;If &lt;strong&gt;yes&lt;/strong&gt;, set the current node to be this child node, set the current character to the next character in the input word, and perform this step again&lt;/li&gt;
&lt;li&gt;If &lt;strong&gt;no&lt;/strong&gt;, it means from this character onwards, we will need to create new nodes and insert them into the trie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is an illustration of what will happen when we want to add the word &lt;code&gt;won&lt;/code&gt; into the trie above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/trie_example_insert.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Following the steps in the algorithm mentioned above, we will arrive at the node &lt;code&gt;o&lt;/code&gt; under &lt;code&gt;w&lt;/code&gt;, at which point we discover that &lt;code&gt;n&lt;/code&gt; is not a child of &lt;code&gt;o&lt;/code&gt;, and therefore we create a new node for the character &lt;code&gt;n&lt;/code&gt;, and insert it under &lt;code&gt;o&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;searching-in-the-trie&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#searching-in-the-trie&#34;&gt;
        ##
    &lt;/a&gt;
    Searching in the Trie
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;A common application scenario of the trie data structure is to search for words with a certain prefix, just like the auto-complete or query suggestion function in a search bar.&lt;/p&gt;
&lt;p&gt;When given a prefix, we can traverse the trie to check if any word in the trie starts with that prefix. If the prefix is found in the trie, we can then use &lt;strong&gt;depth-first&lt;/strong&gt; traversal to retrieve all the words with that prefix.&lt;/p&gt;
&lt;p&gt;For example, given the trie illustrated above, which contains the words &lt;code&gt;was&lt;/code&gt;, &lt;code&gt;wax&lt;/code&gt;, &lt;code&gt;what&lt;/code&gt;, &lt;code&gt;word&lt;/code&gt;, &lt;code&gt;work&lt;/code&gt; and &lt;code&gt;won&lt;/code&gt;, let&amp;rsquo;s see what will happen if we want to search for words with the prefix &lt;code&gt;wa&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/trie_example_query.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Starting from the root node, we are able to find the node &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;From the node &lt;code&gt;a&lt;/code&gt;, we can go on to traverse the trie to retrieve all words starting with the prefix &lt;code&gt;wa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When we arrive at the node &lt;code&gt;s&lt;/code&gt;, we check whether it is &lt;strong&gt;the end of a word&lt;/strong&gt; (yes), and the word &lt;code&gt;was&lt;/code&gt; was output&lt;/li&gt;
&lt;li&gt;Similarity, when we arrive at the node &lt;code&gt;x&lt;/code&gt;, the word &lt;code&gt;wax&lt;/code&gt; is output&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;implementing-trie-in-python&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#implementing-trie-in-python&#34;&gt;
        #
    &lt;/a&gt;
    Implementing Trie in Python
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;To implement a trie, we can first create a &lt;code&gt;TrieNode&lt;/code&gt; class, which can be used to represent a node in the trie. Below is how this class can be implemented.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;TrieNode&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;A node in the trie structure&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; char&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# the character stored in this node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;char &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; char
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# whether this can be the end of a word&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;is_end &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# a counter indicating how many times a word is inserted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# (if this node&amp;#39;s is_end is True)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;counter &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# a dictionary of child nodes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# keys are characters, values are nodes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this implementation, we want to store also the number of times a word has been inserted into the trie. This allows us to support additional features, such as ranking the words by their popularity.&lt;/p&gt;
&lt;p&gt;Given the &lt;code&gt;TrieNode&lt;/code&gt; class, we can go on to implement the &lt;code&gt;Trie&lt;/code&gt; class as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Trie&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;object&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;The trie object&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        The trie has at least the root node.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        The root node does not store any character
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;root &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; TrieNode&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; word&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Insert a word into the trie&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Loop through each character in the word&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Check if there is no child containing the character, create a new child for the current node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; word&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;char&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# If a character is not found,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# create a new node in the trie&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                new_node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; TrieNode&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;char&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; new_node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; new_node
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Mark the end of a word&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;is_end &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Increment the counter to indicate that we see this word once more&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;counter &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;dfs&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; node&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; prefix&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Depth-first traversal of the trie
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        Args:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;            - node: the node to start with
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;            - prefix: the current prefix, for tracing a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;                word while traversing the trie
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;is_end&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;output&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;prefix &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;char&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#eceff4&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;dfs&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;child&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; prefix &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;char&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Given an input (a prefix), retrieve all words stored in
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        the trie with that prefix, sort the words by the number of 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        times they have been inserted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Use a variable within the class to keep all possible outputs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# As there can be more than one word with such prefix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;output &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Check if the prefix is in the trie&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; char &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; char &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;char&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# cannot found the prefix, return empty list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Traverse the trie to get all candidates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;dfs&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;[:&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Sort the results in reverse order and return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;sorted&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;output&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; key&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt; reverse&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below is an example of how this &lt;code&gt;Trie&lt;/code&gt; class can be used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Trie&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;was&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;war&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;what&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;where&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; t&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;query&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wh&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;what&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;where&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;references&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#references&#34;&gt;
        #
    &lt;/a&gt;
    References
&lt;/div&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;Trie&lt;/a&gt;, Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brilliant.org/wiki/tries/&#34;&gt;Tries&lt;/a&gt;, Brilliant.org&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.usfca.edu/~galles/visualization/Trie.html&#34;&gt;Trie (Prefix Tree)&lt;/a&gt; - Visualizing the operations on a trie&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>🌐 A Guide to Displaying CJK Characters in Matplotlib</title>
      <link>/2020/03/15/matplotlib-cjk-fonts.html</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/15/matplotlib-cjk-fonts.html</guid>
      <description>&lt;p&gt;Matplotlib by default does not support displaying Unicode characters such as Chinese, Japanese and Korean characters. This post introduces two different methods to allow these characters to be shown in the graphs.&lt;/p&gt;
&lt;p&gt;The issue here is that we need to configure Matplotlib to use fonts that support the characters that we want to display. To configure the font used by Matplotlib, there are two ways.&lt;/p&gt;
&lt;h2 id=&#34;specifying-the-path-to-the-font-file&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#specifying-the-path-to-the-font-file&#34;&gt;
        #
    &lt;/a&gt;
    Specifying the Path to the Font File
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;If you have a font file that support displaying CJK characters, you can directly provide the path to the font file using the &lt;code&gt;FontProperties&lt;/code&gt; class in Matplotlib. This font file can be a &lt;code&gt;.ttf&lt;/code&gt; file (TrueType Font) or a &lt;code&gt;.otf&lt;/code&gt; file (OpenType Font). For example, you can download a OTF font that supports displaying CJK characters from &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the font file, we can create a &lt;code&gt;FontProperties&lt;/code&gt; instance as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;matplotlib.font_manager&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;fm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fprop &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; fm&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;FontProperties&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fname&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;NotoSansCJKtc-Regular.otf&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When plotting a graph, we can provide this &lt;code&gt;FonProperties&lt;/code&gt; instance as an argument to functions that control what words are displayed in the graph. The example below shows how to set the font for the title and the labels on the X-axis.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;plt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Prepare some data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xticks &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;類別&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{:d}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;randint&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Plot the graph&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;figsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;bar&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;xticks&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; xticks&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontproperties&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;fprop&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rotation&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;title&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;圖1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontproperties&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;fprop&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;show&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The effect will be as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ayeung.dev/images/20200315_graph1.png&#34; alt=&#34;Graph 1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-fonts-in-the-font-folder&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#using-fonts-in-the-font-folder&#34;&gt;
        #
    &lt;/a&gt;
    Using Fonts in the Font Folder
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Another way of using a custom font is to install the font into Matplotlib&amp;rsquo;s font folder, and update the font manager.&lt;/p&gt;
&lt;p&gt;Firstly, we need to know the path to the font folder. We can first use the following command to check the location of the Matplotlib installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;matplotlib&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matplotlib_fname&lt;span style=&#34;color:#eceff4&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On my computer the above command will print:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/local/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The full path to the font folder can be obtained by replacing &lt;code&gt;/mpl-data/matplotlibrc&lt;/code&gt; with &lt;code&gt;/mpl-data/fonts/ttf&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/local/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, you can put the font file you would like to use into the font folder, and then update Matplotlib&amp;rsquo;s font manager:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;matplotlib.font_manager&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;fm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fm&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;_rebuild&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is done, you can check the name of the font you have installed using the following statement. In this example, I have downloaded the font &lt;code&gt;NotoSansCJKtc-Regular.otf&lt;/code&gt; from Google Font, and placed it in the file folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; fm&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;fontManager&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;ttflist &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; f&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the following is the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;Font &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans CJK TC&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;NotoSansCJKtc&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;Regular&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;otf&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; normal normal &lt;span style=&#34;color:#b48ead&#34;&gt;400&lt;/span&gt; normal&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;Font &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans Tagalog&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;NotoSansTagalog&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;Regular&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;ttf&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; normal normal &lt;span style=&#34;color:#b48ead&#34;&gt;400&lt;/span&gt; normal&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;Font &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans Kayah Li&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;NotoSansKayahLi&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;Regular&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;ttf&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; normal normal &lt;span style=&#34;color:#b48ead&#34;&gt;400&lt;/span&gt; normal&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;Font &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans Tai Tham&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;NotoSansTaiTham&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;Regular&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;ttf&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; normal normal &lt;span style=&#34;color:#b48ead&#34;&gt;400&lt;/span&gt; normal&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;Font &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans Ol Chiki&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;NotoSansOlChiki&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;Regular&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;ttf&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; normal normal &lt;span style=&#34;color:#b48ead&#34;&gt;400&lt;/span&gt; normal&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the name of the font is &amp;ldquo;&lt;code&gt;Noto Sans CJK TC&lt;/code&gt;&amp;rdquo;. We can then configure Matplotlib to use this font in our graphs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;matplotlib&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;rcParams&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;font.family&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans CJK TC&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;figure&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;figsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;bar&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;xticks&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; xticks&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rotation&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;title&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;圖1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plt&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;show&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which will produce the same graph as above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ayeung.dev/images/20200315_graph1.png&#34; alt=&#34;Graph 1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-custom-fonts-in-seaborn&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#using-custom-fonts-in-seaborn&#34;&gt;
        #
    &lt;/a&gt;
    Using Custom Fonts in Seaborn
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Choosing the second method described above allowing you to use the font in Seaborn too. Below is an example that shows how you can configure the font to be used in Seaborn.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;seaborn&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;sns&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;colour &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;color_palette&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;GnBu_d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sns&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rc&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;figure.figsize&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;figure.dpi&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;120&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sns&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;font&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Noto Sans CJK TC&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ax &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; sns&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;barplot&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;xticks&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; palette&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;colour&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ax&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;set_xticklabels&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;xticks&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; rotation&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; fontsize&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ax&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;set_title&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;圖表1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ax&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;grid&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the following graph will be produced:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ayeung.dev/images/20200315_graph2.png&#34; alt=&#34;Graph 2&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>🚀 Deploying ML Models in Python - A PyCon HK 2018 Talk</title>
      <link>/2018/11/23/pyconhk-ml-deploy.html</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/11/23/pyconhk-ml-deploy.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pycon.hk/2018/&#34;&gt;PyCon HK 2018&lt;/a&gt; was held on 23-24th November 2018 at Cyberport. I gave a talk on how to deploy machine learning models in Python. The slides of the talk can be found at the link: &lt;a href=&#34;http://talks.albertauyeung.com/pycon2018-deploy-ml-models/&#34;&gt;http://talks.albertauyeung.com/pycon2018-deploy-ml-models/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;video-on-youtube&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#video-on-youtube&#34;&gt;
        #
    &lt;/a&gt;
    Video on Youtube
&lt;/div&gt;
&lt;/h2&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/U2YSFWDjfMw?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;</description>
    </item>
    
    <item>
      <title>🐍 Effortlessly Create N-Grams from Text in Python</title>
      <link>/2018/06/03/generating-ngrams.html</link>
      <pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/06/03/generating-ngrams.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/N-gram&#34;&gt;N-grams&lt;/a&gt; are contiguous sequences of n-items in a sentence. N can be 1, 2 or any other positive integers, although usually we do not consider very large N because those n-grams rarely appears in many different places.&lt;/p&gt;
&lt;p&gt;When performing machine learning tasks related to natural language processing, we usually need to generate n-grams from input sentences. For example, in text classification tasks, in addition to using each individual token found in the corpus, we may want to add bi-grams or tri-grams as features to represent our documents. This post describes several different ways to generate n-grams quickly from input sentences in Python.&lt;/p&gt;
&lt;h2 id=&#34;the-pure-python-way&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#the-pure-python-way&#34;&gt;
        #
    &lt;/a&gt;
    The Pure Python Way
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;In general, an input sentence is just a string of characters in Python. We can use build in functions in Python to generate n-grams quickly. Let&amp;rsquo;s take the following sentence as a sample input:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    Natural-language processing (NLP) is an area of
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    computer science and artificial intelligence
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    concerned with the interactions between computers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    and human (natural) languages.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we want to generate a list of bi-grams from the above sentence, the expected output would be something like below (depending on how do we want to treat the punctuations, the desired output can be different):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;natural language&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;language processing&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;processing nlp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;nlp is&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is an&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;an area&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following function can be used to achieve this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;re&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;generate_ngrams&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Convert to lowercases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;lower&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Replace all none alphanumeric characters with spaces&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;sub&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;[^a-zA-Z0-9\s]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Break sentence in the token, remove empty tokens&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tokens &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;token &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; token &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; token &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Use the zip function to help us generate n-grams&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Concatentate the tokens into ngrams and return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ngrams &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;zip&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;token&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;join&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ngram&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; ngram &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; ngrams&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Applying the above function to the sentence, with &lt;code&gt;n=5&lt;/code&gt;, gives the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; generate_ngrams&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;natural language processing nlp is&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;language processing nlp is an&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;processing nlp is an area&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;nlp is an area of&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;is an area of computer&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;an area of computer science&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;area of computer science and&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;of computer science and artificial&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;computer science and artificial intelligence&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;science and artificial intelligence concerned&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;and artificial intelligence concerned with&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;artificial intelligence concerned with the&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;intelligence concerned with the interactions&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;concerned with the interactions between&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;with the interactions between computers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;the interactions between computers and&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;interactions between computers and human&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;between computers and human natural&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;computers and human natural languages&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above function makes use of the &lt;code&gt;zip&lt;/code&gt; function, which creates a generator that aggregates elements from multiple lists (or iterables in genera). The blocks of codes and comments below offer some more explanation of the usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Sample sentence&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;one two three four five&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokens &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# tokens = [&amp;#34;one&amp;#34;, &amp;#34;two&amp;#34;, &amp;#34;three&amp;#34;, &amp;#34;four&amp;#34;, &amp;#34;five&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sequences &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tokens&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# The above will generate sequences of tokens starting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# from different elements of the list of tokens.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# The parameter in the range() function controls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# how many sequences to generate.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# sequences = [&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#   [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#   [&amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#   [&amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bigrams &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;zip&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;sequences&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# The zip function takes the sequences as a list of inputs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# (using the * operator, this is equivalent to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# zip(sequences[0], sequences[1], sequences[2]).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Each tuple it returns will contain one element from&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# each of the sequences.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# To inspect the content of bigrams, try:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# print(list(bigrams))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# which will give the following:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# [&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#   (&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#   (&amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#   (&amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# ]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Note: even though the first sequence has 5 elements,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# zip will stop after returning 3 tuples, because the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# last sequence only has 3 elements. In other words,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# the zip function automatically handles the ending of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# the n-gram generation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-nltk&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#using-nltk&#34;&gt;
        #
    &lt;/a&gt;
    Using NLTK
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Instead of using pure Python functions, we can also get help from some natural language processing libraries such as the &lt;a href=&#34;https://www.nltk.org/&#34;&gt;Natural Language Toolkit (NLTK)&lt;/a&gt;. In particular, nltk has the &lt;code&gt;ngrams&lt;/code&gt; function that returns a generator of n-grams given a tokenized sentence. (See the documentaion of the function &lt;a href=&#34;http://www.nltk.org/api/nltk.html#nltk.util.ngrams&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;re&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nltk.util&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; ngrams
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;lower&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;sub&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;[^a-zA-Z0-9\s]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokens &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;token &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; token &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; s&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; token &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ngrams&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tokens&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above block of code will generate the same output as the function &lt;code&gt;generate_ngrams()&lt;/code&gt; as shown above.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>🚀 Using Gradient Boosting Machines in Python - A PyCon HK 2017 Talk</title>
      <link>/2017/11/05/pyconhk-gbm.html</link>
      <pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/05/pyconhk-gbm.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pycon.hk/2017/&#34;&gt;PyCon HK 2017&lt;/a&gt; was held on 3rd-4th November 2017 at the City University of Hong Kong. I gave a talk on using gradient boosting machines in Python to perform machine learning. The slides of the talk can be found at the link: &lt;a href=&#34;http://talks.albertauyeung.com/pycon2017-gradient-boosting/&#34;&gt;http://talks.albertauyeung.com/pycon2017-gradient-boosting/&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;video-on-youtube&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#video-on-youtube&#34;&gt;
        #
    &lt;/a&gt;
    Video on Youtube
&lt;/div&gt;
&lt;/h2&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/Wjev_fLNeOU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;</description>
    </item>
    
    <item>
      <title>⚡ Making pandas Operations Faster</title>
      <link>/2017/07/08/fast-pandas-operation.html</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/07/08/fast-pandas-operation.html</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt; is one of the most commonly used Python library in data analysis and machine learning. It is versatile and can be used to handle many different types of data. Before feeding a model with training data, one would most probably pre-process the data and perform feature extraction on data stored as pandas &lt;code&gt;DataFrame&lt;/code&gt;. I have been using pandas extensively in my work, and have recently discovered that the time required to manipulate data stored in a &lt;code&gt;DataFrame&lt;/code&gt; can vary hugely depending on the method you used.&lt;/p&gt;
&lt;h2 id=&#34;numerical-operations&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#numerical-operations&#34;&gt;
        #
    &lt;/a&gt;
    Numerical Operations
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;To demonstrate the differences, let&amp;rsquo;s generate some random data first. The following block of code will generate a &lt;code&gt;DataFrame&lt;/code&gt; with 5,000 rows and 3 columns (&lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;) with values ranging from -10 to 10.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;pandas&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;pd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; data &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;randint&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; df &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;DataFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;data&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; columns&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt; index&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To track the time required to finish an operation, we can make use of the IPython magic function &lt;a href=&#34;https://ipython.org/ipython-doc/3/interactive/magics.html#magic-timeit&#34;&gt;&lt;code&gt;%timeit&lt;/code&gt;&lt;/a&gt; to measure the time required to execute a line in Python.&lt;/p&gt;
&lt;p&gt;To start with, let&amp;rsquo;s consider a simple task of creating a new column in the DataFrame, whose values depend on whether the sum of the values in other columns are greater than zero. First, let&amp;rsquo;s try using the &lt;code&gt;apply&lt;/code&gt; function of the DataFrame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt;timeit df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;apply&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; axis&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;134&lt;/span&gt; ms &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1.59&lt;/span&gt; ms per loop &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mean &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt; runs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; loops each&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It takes about 134ms to finish the operation, which seems quite fast. However, if we take another approach by using numpy&amp;rsquo;s &lt;code&gt;where()&lt;/code&gt; function, we can actually be much faster:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt;timeit df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;where&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;757&lt;/span&gt; µs &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;38.8&lt;/span&gt; µs per loop &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mean &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt; runs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt; loops each&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is ~170 times faster! We can verified that the two methods actually give the same results as follows. (&lt;code&gt;np.any&lt;/code&gt; checks if any of the values in a list is &lt;code&gt;True&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;any&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;string-operations&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#string-operations&#34;&gt;
        #
    &lt;/a&gt;
    String Operations
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;As another example, let&amp;rsquo;s try searching substrings in a column. Firstly, let&amp;rsquo;s generate some random text data in a new column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;choice&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;pear&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s say we want to create a new column, whose values depend on whether Column &lt;code&gt;F&lt;/code&gt; contains the substring &lt;strong&gt;an&lt;/strong&gt;. Firstly, let&amp;rsquo;s try the &lt;code&gt;apply&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt;timeit df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; df&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;apply&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;lambda&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;an&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; axis&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;61.1&lt;/span&gt; ms &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;685&lt;/span&gt; µs per loop &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mean &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt; runs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; loops each&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, if we use the second approach:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt;timeit df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;where&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;df&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;str&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;contains&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;an&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2.65&lt;/span&gt; ms &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;40.9&lt;/span&gt; µs per loop &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;mean &lt;span style=&#34;color:#bf616a&#34;&gt;±&lt;/span&gt; std&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; dev&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; of &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt; runs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt; loops each&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is ~30 times faster.&lt;/p&gt;
&lt;p&gt;The conclusion is that whenever we can operate on the whole column, we should avoid using &lt;code&gt;apply&lt;/code&gt;, which is looping over every row of the DataFrame, and is not able to take advantage of numpy vectorization when performing the calculation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>🔍 Performing Sequence Labelling using CRF in Python</title>
      <link>/2017/06/17/python-sequence-labelling-with-crf.html</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/17/python-sequence-labelling-with-crf.html</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://en.wikipedia.org/wiki/Natural_language_processing&#34;&gt;natural language processing&lt;/a&gt;, it is a common task to &lt;strong&gt;extract words or phrases of particular types&lt;/strong&gt; from a given sentence or paragraph. For example, when performing analysis of a corpus of news articles, we may want to know which countries are mentioned in the articles, and how many articles are related to each of these countries.&lt;/p&gt;
&lt;h2 id=&#34;sequence-labelling-in-nlp&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#sequence-labelling-in-nlp&#34;&gt;
        #
    &lt;/a&gt;
    Sequence Labelling in NLP
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;This is actually a special case of &lt;strong&gt;sequence labelling&lt;/strong&gt; in NLP (others include &lt;a href=&#34;https://en.wikipedia.org/wiki/Part-of-speech_tagging&#34;&gt;POS tagging&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Shallow_parsing&#34;&gt;Chunking&lt;/a&gt;), in which the goal is to assign a label to each member in the sequence. In the case of identifying country names, we would like to assign a &amp;lsquo;&lt;em&gt;country&lt;/em&gt;&amp;rsquo; label to words that form part of a country name, and a &amp;lsquo;&lt;em&gt;irrelevant&lt;/em&gt;&amp;rsquo; label to all other words. For example, the following is a sentence broken down into tokens, and its desired output after the sequence labelling process:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Paris&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;the&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;capital&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;France&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;output &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;em&gt;I&lt;/em&gt; means that the token of that position is an irrelevant word, and &lt;em&gt;C&lt;/em&gt; means that the token of that position is a word that form part of a country name.&lt;/p&gt;
&lt;h2 id=&#34;methods-of-sequence-labelling&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#methods-of-sequence-labelling&#34;&gt;
        #
    &lt;/a&gt;
    Methods of Sequence Labelling
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;A simple, though sometimes quite useful, approach is to prepare a &lt;strong&gt;dictionary&lt;/strong&gt; of country names, and look for these names in each of the sentences in the corpus. However, this method relies heavily on the comprehensiveness of the dictionary. While there is a limited number of countries, in other cases such as city names the number of possible entries in the dictionary can be huge. Even for countries, many countries may be referred to using different sequence of characters in different contexts. For example, the United States of America may be referred to in an article as &lt;em&gt;the USA&lt;/em&gt;, &lt;em&gt;the States&lt;/em&gt;, or simply &lt;em&gt;America&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In fact, a person reading a news article would usually recognise that a word or a phrase refers to a country, even when he or she has not seen the name of that country before. The reason is that there are many differnt &lt;strong&gt;cues&lt;/strong&gt; in the sentence or the whole article that can be used to determine whether a word or a phrase is a country name. Take the following two sentences as examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kerry travels to &lt;strong&gt;Laos&lt;/strong&gt;&amp;rsquo;s capital, Vientiane, on Monday for meetings of foreign ministers from the 10-member Association of South East Asia Nations (ASEAN).&lt;/li&gt;
&lt;li&gt;The Governments of &lt;strong&gt;Bolivia&lt;/strong&gt; and &lt;strong&gt;Uruguay&lt;/strong&gt; will strengthen ties with a customs cooperation agreement to be in force on June 15th.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first sentence implies that something called &lt;strong&gt;Lao&lt;/strong&gt; has a capital, suggesting that &lt;strong&gt;Lao&lt;/strong&gt; is a country. Similarly, in the second sentence we know that both &lt;strong&gt;Bolivia&lt;/strong&gt; and &lt;strong&gt;Uruguay&lt;/strong&gt; are countries as the news mentioned about their governments. In other words, the words around &amp;lsquo;Lao&amp;rsquo;, &amp;lsquo;Bolivia&amp;rsquo; and &amp;lsquo;Uruguay&amp;rsquo; provide clues as to whether they are country names.&lt;/p&gt;
&lt;h2 id=&#34;conditional-random-field-crf&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#conditional-random-field-crf&#34;&gt;
        #
    &lt;/a&gt;
    Conditional Random Field (CRF)
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;To take advantage of the surrounding context when labelling tokens in a sequence, a commonly used method is &lt;a href=&#34;https://en.wikipedia.org/wiki/Conditional_random_field&#34;&gt;conditional random field&lt;/a&gt; (CRF), first proposed by &lt;a href=&#34;http://repository.upenn.edu/cgi/viewcontent.cgi?article=1162&amp;amp;context=cis_papers&#34;&gt;Lafferty et al.&lt;/a&gt; in 2001. It is  a type of probabilistic graphical model that can be used to model sequential data, such as labels of words in a sentence.&lt;/p&gt;
&lt;p&gt;This article is not intended to discuss the technical details of CRF. If you are interested, you are recommended to check out one of the following tutorials which provide very good explanation of how CRF works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://homepages.inf.ed.ac.uk/csutton/publications/crftut-fnt.pdf&#34;&gt;An Introduction to Conditional
Random Fields&lt;/a&gt; by Charles Sutton and Andrew McCallum&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.echen.me/2012/01/03/introduction-to-conditional-random-fields/&#34;&gt;Introduction to Conditional Random Fields&lt;/a&gt; by Edwin Chen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In CRF, we will design a set of &lt;strong&gt;feature functions&lt;/strong&gt; to extract features for each word in a sentence. During model training, CRF will try to determine the weights of different feature functions that will maximise the likelihood of the labels in the training data.&lt;/p&gt;
&lt;h2 id=&#34;train-crf-model-in-python&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#train-crf-model-in-python&#34;&gt;
        #
    &lt;/a&gt;
    Train CRF Model in Python
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;One of the commonly used CRF library is &lt;a href=&#34;http://www.chokkan.org/software/crfsuite/&#34;&gt;CRFSuite implemented by Naoaki Okazaki&lt;/a&gt; in C/C++. The library is already easy to use given its command line interface. A Python binding to CRFSuite, &lt;a href=&#34;https://github.com/scrapinghub/python-crfsuite&#34;&gt;pycrfsuite&lt;/a&gt; is available for using the API in Python. This Python module is exactly the module used in the POS tagger in the &lt;a href=&#34;http://www.nltk.org/&#34;&gt;nltk module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To demonstrate how pysrfsuite can be used to train a linear chained CRF sequence labelling model, we will go through an example using some data for &lt;em&gt;named entity recognition&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;named-entity-recogniton&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#named-entity-recogniton&#34;&gt;
        ##
    &lt;/a&gt;
    Named Entity Recogniton
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;To train a named entity recognition model, we need some labelled data. The dataset that will be used below is the &lt;strong&gt;Reuters-128 dataset&lt;/strong&gt;, which is an English corpus in the NLP Interchange Format (NIF). It contains 128 economic news articles. The dataset contains information for &lt;strong&gt;880&lt;/strong&gt; named entities with their position in the document and a URI of a &lt;a href=&#34;http://wiki.dbpedia.org/&#34;&gt;DBpedia&lt;/a&gt; resource identifying the entity. It was created by the &lt;a href=&#34;http://aksw.org/About.html&#34;&gt;Agile Knowledge Engineering and Semantic Web research group at Leipzig University, Germany&lt;/a&gt;. More details can be found in &lt;a href=&#34;http://svn.aksw.org/papers/2014/LREC_N3NIFNERNED/public.pdf&#34;&gt;their paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the following, we will use the XML verison of the dataset, which can be downloaded from &lt;a href=&#34;https://github.com/AKSW/n3-collection&#34;&gt;https://github.com/AKSW/n3-collection&lt;/a&gt;. Below is some lines extracted from the XML data file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;document&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;documenturi&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;http://www.research.att.com/~lewis/Reuters-21578/15009&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;documenturi&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;documentsource&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;Reuters-21578&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;documentsource&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;textwithnamedentities&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;namedentityintext&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;uri&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;http://aksw.org/notInWiki/Home_Intensive_Care_Inc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;Home Intensive Care Inc&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;namedentityintext&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;simpletextpart&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt; said it has opened a Dialysis at Home office in &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;simpletextpart&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;namedentityintext&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;uri&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;http://dbpedia.org/resource/Philadelphia&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;Philadelphia&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;namedentityintext&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;simpletextpart&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;, its 12th nationwide.&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;simpletextpart&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;textwithnamedentities&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The XML block shown above refers to one of the documents in the dataset. The semantics is self-explanatory. The document has a sentence &amp;lsquo;Home Intensive Care Inc said it has opened a Dialysis at Home office in Philadelphia, its 12th nationwide&amp;rsquo;, in which &lt;strong&gt;Home Intensive Care Inc&lt;/strong&gt; and &lt;strong&gt;Philadelphia&lt;/strong&gt; are labelled as named entities.&lt;/p&gt;
&lt;h3 id=&#34;prepare-the-dataset-for-training&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#prepare-the-dataset-for-training&#34;&gt;
        ##
    &lt;/a&gt;
    Prepare the Dataset for Training
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;In order to prepare the dataset for training, we need to label every word (or token) in the sentences to be either &lt;em&gt;irrelevant&lt;/em&gt; or part of a &lt;em&gt;named entity&lt;/em&gt;. Since the data is in XML format, we can make use of &lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;&gt;BeautifulSoup&lt;/a&gt; to parse the file and extract the data as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;bs4&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; bs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;bs4.element&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; Tag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;codecs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Read data file and parse the XML&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; codecs&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;open&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;reuters.xml&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; infile&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    soup &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; bs&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;infile&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;html5lib&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docs &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; elem &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; soup&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;find_all&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;document&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    texts &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Loop through each child of the element under &amp;#34;textwithnamedentities&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; elem&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;textwithnamedentities&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; Tag&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; c&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;namedentityintext&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                label &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# part of a named entity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                label &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# irrelevant word&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; w &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; c&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;text&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    texts&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    docs&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;texts&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result will be a list of documents, each of which contains a list of (word, label) tuples. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;][:&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Paxar&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Corp&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;said&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;it&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;has&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;acquired&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Thermo-Print&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;generating-part-of-speech-tags&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#generating-part-of-speech-tags&#34;&gt;
        ##
    &lt;/a&gt;
    Generating Part-of-Speech Tags
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;To train a CRF model, we need to create features for each of the tokens in the sentences. One particularly useful feature in NLP is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Part-of-speech_tagging&#34;&gt;part-of-speech (POS) tags&lt;/a&gt; of the words. They indicates whether a word is a noun, a verb or an adjective. (In fact, a POS tagger is also usually a trained CRF model.)&lt;/p&gt;
&lt;p&gt;We can use &lt;a href=&#34;http://www.nltk.org/book/ch05.html&#34;&gt;NLTK&amp;rsquo;s POS tagger&lt;/a&gt; to generate the POS tags for the tokens in our documents as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nltk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; doc &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;enumerate&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;docs&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Obtain the list of tokens in the document&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tokens &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Perform POS tagging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tagged &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; nltk&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;pos_tag&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tokens&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Take the word, POS tag, and its label&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;([(&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; pos&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;word&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; pos&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;zip&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; tagged&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output of the above process will be a list of documents, each of which is a list of tuples with the word, its POS tag and its label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; data&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Paxar&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;NNP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Corp&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;NNP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;said&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;VBD&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;it&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;PRP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;has&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;VBZ&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;acquired&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;VBN&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Thermo-Print&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;NNP&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;generating-features&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#generating-features&#34;&gt;
        ##
    &lt;/a&gt;
    Generating Features
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Given the POS tags, we can now continue to generate more features for each of the tokens in the dataset. The features that will be useful in the training process depends on the task at hand. Below are some of the commonly used features for a word $w$ in named entity recognition:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The word $w$ itself (converted to lowercase for normalisation)&lt;/li&gt;
&lt;li&gt;The prefix/suffix of $w$ (e.g. -ion)&lt;/li&gt;
&lt;li&gt;The words surrounding $w$, such as the previous and the next word&lt;/li&gt;
&lt;li&gt;Whether $w$ is in uppercase or lowercase&lt;/li&gt;
&lt;li&gt;Whether $w$ is a number, or contains digits&lt;/li&gt;
&lt;li&gt;The POS tag of $w$, and those of the surrounding words&lt;/li&gt;
&lt;li&gt;Whether $w$ is or contains a special character (e.g. hypen, dollar sign)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a function for generating features for our documents. It takes a doc (in the form of a listof tuples as shown above), and an index (the $i$th document), and return the documents with features extracted. (A similar example can be found in &lt;a href=&#34;https://github.com/scrapinghub/python-crfsuite/blob/master/examples/CoNLL%202002.ipynb&#34;&gt;the repository of pyscrfsuite&lt;/a&gt;.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;word2features&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    word &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    postag &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Common features for all words&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    features &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;bias&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;word.lower=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; word&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;lower&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;word[-3:]=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; word&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;word[-2:]=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; word&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;word.isupper=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;isupper&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;word.istitle=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;istitle&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;word.isdigit=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;isdigit&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;postag=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; postag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Features for words that are not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# at the beginning of a document&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        word1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        postag1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        features&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;-1:word.lower=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;lower&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;-1:word.istitle=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;istitle&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;-1:word.isupper=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;isupper&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;-1:word.isdigit=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;isdigit&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;-1:postag=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; postag1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Indicate that it is the &amp;#39;beginning of a document&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        features&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;BOS&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Features for words that are not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# at the end of a document&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        word1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        postag1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        features&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;+1:word.lower=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;lower&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;+1:word.istitle=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;istitle&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;+1:word.isupper=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;isupper&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;+1:word.isdigit=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; word1&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;isdigit&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;+1:postag=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; postag1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Indicate that it is the &amp;#39;end of a document&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        features&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;EOS&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; features
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;training-the-model&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#training-the-model&#34;&gt;
        ##
    &lt;/a&gt;
    Training the Model
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;To train the model, we need to first prepare the training data and the corresponding labels. Also, to be able to investigate the accuracy of the model, we need to separate the data into training set and test set. Below are some codes for preparing the training data and test data, using the &lt;a href=&#34;http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html&#34;&gt;&lt;code&gt;train_test_split&lt;/code&gt; function in scikit-learn&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;sklearn.model_selection&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; train_test_split
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# A function for extracting features in documents&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;extract_features&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;word2features&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;))]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# A function fo generating the list of labels for each document&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;get_labels&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;label &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;token&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; postag&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; doc&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;extract_features&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; doc &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;get_labels&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;doc&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; doc &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; data&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;X_train&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; X_test&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y_train&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y_test &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; train_test_split&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;X&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; test_size&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0.2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;pycrfsuite&lt;/code&gt;, A CRF model in can be trained by first creating a &lt;strong&gt;trainer&lt;/strong&gt;, and then submit the training data and corresponding labels to the trainer. After that, set the parameters and call &lt;code&gt;train()&lt;/code&gt; to start the training process. For the complete list of parameters, one can refer to the &lt;a href=&#34;http://www.chokkan.org/software/crfsuite/manual.html#idp8849114176&#34;&gt;documentation of CRFSuite&lt;/a&gt;. With the very small dataset in this example, the training with &lt;code&gt;max_iterations=200&lt;/code&gt; can be finished in a few seconds. Below is the code for creating the trainer and start training the model:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;pycrfsuite&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trainer &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; pycrfsuite&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Trainer&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;verbose&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Submit training data to the trainer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; xseq&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; yseq &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;zip&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;X_train&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y_train&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    trainer&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;xseq&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; yseq&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Set the parameters of the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trainer&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;set_params&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# coefficient for L1 penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;c1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# coefficient for L2 penalty&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;c2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.01&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# maximum number of iterations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;max_iterations&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# whether to include transitions that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# are possible, but not observed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;feature.possible_transitions&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Provide a file name as a parameter to the train function, such that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# the model will be saved to the file when training is finished&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trainer&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;train&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;crf.model&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you have set &lt;code&gt;verbose=True&lt;/code&gt; when initialising the trainer, the trainer will print out the training progress as it is trained against the provided training data.&lt;/p&gt;
&lt;h3 id=&#34;checking-the-results&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#checking-the-results&#34;&gt;
        ##
    &lt;/a&gt;
    Checking the Results
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;Once we have the model trained, we can apply it on our test data and see whether it gives reasonable results. Assuming that the model is saved to a file named &lt;code&gt;crf.model&lt;/code&gt;. The following block of code shows how we can load the model into memory, and apply it on to our test data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tagger &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; pycrfsuite&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Tagger&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tagger&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;open&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;crf.model&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y_pred &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tagger&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;tag&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;xseq&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; xseq &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; X_test&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Let&amp;#39;s take a look at a random sample in the testing set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;zip&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y_pred&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;split&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; X_test&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]]):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt; (&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;The following will be printed:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;sci-med (N)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;life (N)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;systems (N)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;inc (N)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;said (I)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;its (I)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;directors (I)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;approved (I)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;a (I)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;previously (I)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result looks reasonable as the first four words are correctly identified as part of a named entity.&lt;/p&gt;
&lt;p&gt;To study the performance of the CRF tagger trained above in a more quantitative way, we can check the &lt;strong&gt;precision&lt;/strong&gt; and &lt;strong&gt;recall&lt;/strong&gt; on the test data. This can be done very easily using the &lt;a href=&#34;http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html&#34;&gt;&lt;code&gt;classification_report&lt;/code&gt; function in scikit-learn&lt;/a&gt;. However, given that the predictions are sequences of tags, we need to transform the data into a list of labels before feeding them into the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;sklearn.metrics&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; classification_report
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Create a mapping of labels to indices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;labels &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Convert the sequences of tags into a 1-dimensional array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;predictions &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;labels&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tag&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; y_pred &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; tag &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; row&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;truths &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;labels&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tag&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; y_test &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; tag &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; row&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Print out the classification report&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;classification_report&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    truths&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; predictions&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target_names&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which will prints a report as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              precision   recall  f1&lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;score   support
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          I       &lt;span style=&#34;color:#b48ead&#34;&gt;0.98&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;0.98&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;0.98&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;3322&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          N       &lt;span style=&#34;color:#b48ead&#34;&gt;0.85&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;0.85&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;0.85&lt;/span&gt;       &lt;span style=&#34;color:#b48ead&#34;&gt;405&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;avg &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; total       &lt;span style=&#34;color:#b48ead&#34;&gt;0.97&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;0.97&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;0.97&lt;/span&gt;      &lt;span style=&#34;color:#b48ead&#34;&gt;3727&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that we have achieved 85% precision and 85% recall in predicting whether a word is part of a named entity. There are several things by which we can improve the performance, including creating better features or tuning the parameters of the CRF model.&lt;/p&gt;
&lt;h3 id=&#34;source-codes&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#source-codes&#34;&gt;
        ##
    &lt;/a&gt;
    Source Codes
&lt;/div&gt;
&lt;/h3&gt;
&lt;p&gt;The source code for reproducing the above results can be found in the following github repository: &lt;a href=&#34;https://github.com/albertauyeung/python-crf-named-entity-recognition&#34;&gt;https://github.com/albertauyeung/python-crf-named-entity-recognition&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#references&#34;&gt;
        #
    &lt;/a&gt;
    References
&lt;/div&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lafferty, J., McCallum, A., Pereira, F. (2001). &lt;a href=&#34;http://repository.upenn.edu/cgi/viewcontent.cgi?article=1162&amp;amp;context=cis_papers&#34;&gt;&amp;ldquo;Conditional random fields: Probabilistic models for segmenting and labeling sequence data&amp;rdquo;&lt;/a&gt;. Proc. 18th International Conf. on Machine Learning. Morgan Kaufmann. pp. 282–289.&lt;/li&gt;
&lt;li&gt;Erdogan, H. (2010). &lt;a href=&#34;http://www.icmla-conference.org/icmla10/CFP_Tutorial_files/hakan.pdf&#34;&gt;Sequence Labeling: Generative and Discriminative Approaches - Hidden Markov Models, Conditional Random Fields and Structured SVMs&lt;/a&gt;. ICMLA 2010 Tutorial.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>🔥 Matrix Factorization: A Simple Tutorial and Implementation in Python</title>
      <link>/2017/04/23/python-matrix-factorization.html</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/04/23/python-matrix-factorization.html</guid>
      <description>&lt;p&gt;There is probably no need to say that there is too much information on the Web nowadays. Search engines help us a little bit. What is better is to have something interesting recommended to us automatically without asking. Indeed, from as simple as a list of the most popular questions and answers on &lt;a href=&#34;https://www.quora.com/&#34;&gt;Quora&lt;/a&gt; to some more personalized recommendations we received on &lt;a href=&#34;https://www.amazon.com&#34;&gt;Amazon&lt;/a&gt;, we are usually offered recommendations on the Web.&lt;/p&gt;
&lt;p&gt;Recommendations can be generated by a wide range of algorithms. While user-based or item-based &lt;a href=&#34;http://en.wikipedia.org/wiki/Collaborative_filtering&#34;&gt;collaborative filtering&lt;/a&gt; methods are simple and intuitive, &lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_decomposition&#34;&gt;matrix factorization&lt;/a&gt; techniques are usually more effective because they allow us to discover the latent features underlying the interactions between users and items. Of course, matrix factorization is simply a mathematical tool for playing around with matrices, and is therefore applicable in many scenarios where one would like to find out something hidden under the data.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will go through the basic ideas and the mathematics of matrix factorization, and then we will present a simple implementation in &lt;a href=&#34;http://www.python.org&#34;&gt;Python&lt;/a&gt;. We will proceed with the assumption that we are dealing with user ratings (e.g. an integer score from the range of 1 to 5) of items in a recommendation system.&lt;/p&gt;
&lt;h2 id=&#34;basic-idea&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#basic-idea&#34;&gt;
        #
    &lt;/a&gt;
    Basic Idea
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Just as its name suggests, matrix factorization is to, obviously, factorize a matrix, i.e. to find out two (or more) matrices such that when you multiply them you will get back the original matrix.&lt;/p&gt;
&lt;p&gt;As mentioned above, from an application point of view, matrix factorization can be used to discover latent features underlying the interactions between two different kinds of entities. (Of course, you can consider more than two kinds of entities and you will be dealing with tensor factorization, which would be more complicated.) And one obvious application is to predict ratings in collaborative filtering.&lt;/p&gt;
&lt;p&gt;In a recommendation system such as &lt;a href=&#34;http://www.netflix.com/&#34;&gt;Netflix&lt;/a&gt; or &lt;a href=&#34;http://movielens.umn.edu/&#34;&gt;MovieLens&lt;/a&gt;, there is a group of users and a set of items (movies for the above two systems). Given that each users have rated some items in the system, we would like to predict how the users would rate the items that they have not yet rated, such that we can make recommendations to the users. In this case, all the information we have about the existing ratings can be represented in a matrix. Assume now we have 5 users and 10 items, and ratings are integers ranging from 1 to 5, the matrix may look something like this (a hyphen means that the user has not yet rated the movie):&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;D1&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;D2&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;D3&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;D4&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;U1&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;U2&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;U3&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;U4&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;U5&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Hence, the task of predicting the missing ratings can be considered as filling in the blanks (the hyphens in the matrix) such that the values would be consistent with the existing ratings in the matrix.&lt;/p&gt;
&lt;p&gt;The intuition behind using matrix factorization to solve this problem is that there should be some latent features that determine how a user rates an item. For example, two users would give high ratings to a certain movie if they both like the actors or actresses in the movie, or if the movie is an action movie, which is a genre preferred by both users.&lt;/p&gt;
&lt;p&gt;Hence, if we can discover these latent features, we should be able to predict a rating with respect to a certain user and a certain item, because the features associated with the user should match with the features associated with the item.&lt;/p&gt;
&lt;p&gt;In trying to discover the different features, we also make the assumption that the &lt;strong&gt;number of features&lt;/strong&gt; would be smaller than the &lt;strong&gt;number of users&lt;/strong&gt; and the &lt;strong&gt;number of items&lt;/strong&gt;. It should not be difficult to understand this assumption because clearly it would not be reasonable to assume that each user is associated with a unique feature (although this is not impossible). And anyway if this is the case there would be no point in making recommendations, because each of these users would not be interested in the items rated by other users. Similarly, the same argument applies to the items.&lt;/p&gt;
&lt;h2 id=&#34;the-maths-of-matrix-factorization&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#the-maths-of-matrix-factorization&#34;&gt;
        #
    &lt;/a&gt;
    The Maths of Matrix Factorization
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Having discussed the intuition behind matrix factorization, we can now go on to work on the mathematics. Firstly, we have a set $U$ of users, and a set $D$ of items. Let $\mathbf{R}$ of size $|U| \times |D|$ be the matrix that contains all the ratings that the users have assigned to the items. Also, we assume that we would like to discover $K$ latent features. Our task, then, is to find two matrics $\mathbf{P}$ (of size $|U| \times |K|$) and $\mathbf{Q}$ (of size $|D| \times |K|$) such that their product apprioximates $\mathbf{R}$:&lt;/p&gt;
&lt;p&gt;$$\mathbf{R} \approx \mathbf{P} \times \mathbf{Q}^T = \hat{\mathbf{R}}$$&lt;/p&gt;
&lt;p&gt;In this way, each row of $\mathbf{P}$ would represent the strength of the associations between &lt;strong&gt;a user and the features&lt;/strong&gt;. Similarly, each row of $\mathbf{Q}$  would represent the strength of the associations between &lt;strong&gt;an item and the features&lt;/strong&gt;. To get the prediction of a rating of an item $d_j$ by $u_i$, we can calculate the dot product of their vectors:&lt;/p&gt;
&lt;p&gt;$$\hat{r}_{ij} = p_i^T q_j = \sum _{k=1}^{K}  p _{ik} q _{kj}$$&lt;/p&gt;
&lt;p&gt;Now, we have to find a way to obtain $\mathbf{P}$ and $\mathbf{Q}$. One way to approach this problem is the first intialize the two matrices with some values, calculate how &lt;strong&gt;different&lt;/strong&gt; their product is to $\mathbf{M}$, and then try to minimize this difference iteratively. Such a method is called gradient descent, aiming at finding a local minimum of the difference.&lt;/p&gt;
&lt;p&gt;The difference here, usually called the &lt;strong&gt;error&lt;/strong&gt; between the estimated rating and the real rating, can be calculated by the following equation for each &lt;strong&gt;user-item pair&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;$$e _{ij}^2 = (r _{ij} - \hat{r} _{ij})^2 = (r _{ij} - \sum _{k=1}^K p _{ik} q _{kj})^2$$&lt;/p&gt;
&lt;p&gt;Here we consider the &lt;strong&gt;squared error&lt;/strong&gt; because the estimated rating can be either higher or lower than the real rating.&lt;/p&gt;
&lt;p&gt;To minimize the error, we have to know in which direction we have to modify the values of $p_{ik}$ and $q_{kj}$. In other words, we need to know the gradient at the current values, and therefore we differentiate the above equation with respect to these two variables separately:&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial}{\partial p _{ik}} e _{ij}^2 = -2(r _{ij} - \hat{r} _{ij}) (q _{kj}) = -2 e _{ij} q _{kj}
$$&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial}{\partial q _{ik}} e _{ij}^2 = -2(r _{ij} - \hat{r} _{ij}) (p _{ik}) = -2 e _{ij} p _{ik}
$$&lt;/p&gt;
&lt;p&gt;Having obtained the gradient, we can now formulate the &lt;strong&gt;update rules&lt;/strong&gt; for both $p_{ik}$ and $q_{kj}$:&lt;/p&gt;
&lt;p&gt;$$p&amp;rsquo; _{ik} = p _{ik} + \alpha \frac{\partial}{\partial p _{ik}} e _{ij}^2 = p _{ik} + 2\alpha e _{ij} q _{kj}$$&lt;/p&gt;
&lt;p&gt;$$q&amp;rsquo; _{kj} = q _{kj} + \alpha \frac{\partial}{\partial q _{kj}} e _{ij}^2 = q _{kj} + 2\alpha e _{ij} p _{ik}$$&lt;/p&gt;
&lt;p&gt;Here, $\alpha$ is a constant whose value determines the &lt;strong&gt;rate of approaching the minimum&lt;/strong&gt;. Usually we will choose a small value for $\alpha$, say 0.0002. This is because if we make too large a step towards the minimum we may run into the risk of missing the minimum and end up oscillating around the minimum.&lt;/p&gt;
&lt;p&gt;A question might have come to your mind by now: if we find two matrices $\mathbf{P}$ and $\mathbf{Q}$ such that $\mathbf{P} \times \mathbf{Q}$ approximates $\mathbf{R}$, isn&amp;rsquo;t that our predictions of all the unseen ratings will be zeros? In fact, we are not really trying to come up with $\mathbf{P}$ and $\mathbf{Q}$ such that we can reproduce $\mathbf{R}$ exactly. Instead, we will only try to minimise the errors of the &lt;strong&gt;observed&lt;/strong&gt; user-item pairs. In other words, if we let $T$ be a set of tuples, each of which is in the form of $(u_i, d_j, r_{ij})$, such that $T$ contains all the observed user-item pairs together with the associated ratings, we are only trying to minimise every $e_{ij}$ for $(u_i, d_j, r_{ij}) \in T$. (In other words, $T$ is our set of &lt;strong&gt;training data&lt;/strong&gt;.) As for the rest of the unknowns, we will be able to determine their values once the associations between the users, items and features have been learnt.&lt;/p&gt;
&lt;p&gt;Using the above update rules, we can then iteratively perform the operation until the error converges to its minimum. We can check the overall error as calculated using the following equation and determine when we should stop the process.&lt;/p&gt;
&lt;p&gt;$$E = \sum _{(u _i, d _j, r _{ij}) \in T}{e _{ij}} = \sum _{(u _i,d _j,r _{ij}) \in T}{(r _{ij} - \sum _{k=1}^K p _{ik} q _{kj})^2}$$&lt;/p&gt;
&lt;h2 id=&#34;regularization&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#regularization&#34;&gt;
        #
    &lt;/a&gt;
    Regularization
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;The above algorithm is a very basic algorithm for factorizing a matrix. There are a lot of methods to make things look more complicated. A common extension to this basic algorithm is to introduce &lt;a href=&#34;https://en.wikipedia.org/wiki/Regularization_(mathematics)&#34;&gt;&lt;strong&gt;regularization&lt;/strong&gt;&lt;/a&gt; to avoid &lt;strong&gt;overfitting&lt;/strong&gt;. This is done by adding a parameter $\beta$ and modify the squared error as follows:&lt;/p&gt;
&lt;p&gt;$$e _{ij}^2 = (r _{ij} - \sum _{k=1}^K p _{ik} q _{kj})^2 + \frac{\beta}{2} \sum _{k=1}^K (||P||^2 + ||Q||^2)$$&lt;/p&gt;
&lt;p&gt;In other words, the new parameter $\beta$ is used to control the &lt;strong&gt;magnitudes&lt;/strong&gt; of the user-feature and item-feature vectors such that $P$ and $Q$ would give a good approximation of $R$ without having to contain large numbers. In practice, $\beta$ is set to some values in the order of 0.02. The new update rules for this squared error can be obtained by a procedure similar to the one described above. The new update rules are as follows:&lt;/p&gt;
&lt;p&gt;$$p&amp;rsquo; _{ik} = p _{ik} + \alpha \frac{\partial}{\partial p _{ik}} e _{ij}^2 = p _{ik} + \alpha(2 e _{ij} q _{kj} - \beta p _{ik} )$$&lt;/p&gt;
&lt;p&gt;$$q&amp;rsquo; _{kj} = q _{kj} + \alpha \frac{\partial}{\partial q _{kj}} e _{ij}^2 = q _{kj} + \alpha(2 e _{ij} p _{ik} - \beta q _{kj} )$$&lt;/p&gt;
&lt;h2 id=&#34;adding-biases&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#adding-biases&#34;&gt;
        #
    &lt;/a&gt;
    Adding Biases
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;When predicting the ratings of users given to items, it is useful to consider how ratings are generated. In the above discussion, we have assumed that ratings are generated based on matching the users preferences on some latent factors and the items&amp;rsquo; characteristics on the latent factors. Actually, it may also be helpful to consider additional factors here.&lt;/p&gt;
&lt;p&gt;For example, we can assume that when a rating is generated, some &lt;strong&gt;biases&lt;/strong&gt; may also contribute to the ratings. In particular, every user may have his or her own bias, meaning that he or she may tend to rate items higher or lower than the others. In movie ratings, if a user is a serious movie watcher, he or she may tend to give lower ratings, when compared to another user who generally enjoys movies as long as they are not too boring. A similar idea can also be applied to the items being rated.&lt;/p&gt;
&lt;p&gt;Hence, in the equal of predicting a rating, we can also add these biases in order to better model how a rating is generated:&lt;/p&gt;
&lt;center&gt;
$\hat{r}_{ij} = b + bu_i + bd_j + \sum_{k=1}^k{p_{ik} q_{kj}}$
&lt;/center&gt;&lt;br/&gt;
&lt;p&gt;where $b$ is the global bias (which can be easily estimated by using the mean of all ratings), $bu_i$ is the bias of user $i$, and $bd_j$ is the bias of item $j$.&lt;/p&gt;
&lt;p&gt;Using the same steps mentioned above, we can derive the update rules for the user biases and item biases easily:&lt;/p&gt;
&lt;p&gt;$$bu&amp;rsquo; _i = bu _i + \alpha \times (e _{ij} - \beta bu _i)$$&lt;/p&gt;
&lt;p&gt;$$bd&amp;rsquo; _j = bd _j + \alpha \times (e _{ij} - \beta bd _j)$$&lt;/p&gt;
&lt;p&gt;In practice, the process of factorization will converge faster if biases are included in the model.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-implementation-in-python&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#a-simple-implementation-in-python&#34;&gt;
        #
    &lt;/a&gt;
    A Simple Implementation in Python
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;Once we have derived the update rules as described above, it actually becomes very straightforward to implement the algorithm. The following is a function that implements the algorithm in Python using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Stochastic_gradient_descent&#34;&gt;&lt;strong&gt;stochastic gradient descent&lt;/strong&gt;&lt;/a&gt; algorithm. Note that this implementation requires the &lt;a href=&#34;http://numpy.scipy.org/&#34;&gt;&lt;strong&gt;Numpy&lt;/strong&gt;&lt;/a&gt; module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;MF&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; R&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; K&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; alpha&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; beta&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; iterations&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        Perform matrix factorization to predict empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        entries in a matrix.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        Arguments
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        - R (ndarray)   : user-item rating matrix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        - K (int)       : number of latent dimensions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        - alpha (float) : learning rate
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        - beta (float)  : regularization parameter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; R
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_users&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_items &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; R&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;shape
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;K &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;alpha &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; alpha
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;beta &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; beta
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;iterations &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; iterations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;train&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Initialize user and item latent feature matrice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;P &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;normal&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;scale&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;K&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; size&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_users&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;K&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Q &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;normal&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;scale&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1.&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;K&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; size&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_items&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;K&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Initialize the biases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_u &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;zeros&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_users&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;zeros&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_items&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;mean&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;where&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Create a list of training samples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;samples &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_users&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;num_items&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Perform stochastic gradient descent for number of iterations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        training_process &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;range&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;iterations&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;shuffle&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;samples&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;sgd&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mse &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;mse&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            training_process&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; mse&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Iteration: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt; ; error = &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%.4f&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; mse&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; training_process
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;mse&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        A function to compute the total mean square error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        xs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; ys &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;nonzero&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        predicted &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;full_matrix&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        error &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;zip&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; ys&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            error &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;pow&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;R&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; predicted&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;sqrt&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;error&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;sgd&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        Perform stochastic graident descent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; r &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;samples&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Computer prediction and error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            prediction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;get_rating&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            e &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;r &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; prediction&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Update biases&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_u&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;alpha &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;beta &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_u&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_i&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;alpha &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;beta &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_i&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Update user and item latent feature matrices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;P&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;alpha &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Q&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;beta &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;P&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,:])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Q&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;alpha &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;P&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;beta &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Q&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;,:])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;get_rating&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        Get the predicted rating of user i and item j
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        prediction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_u&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_i&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;P&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;dot&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Q&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;:]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;T&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; prediction
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;full_matrix&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        Computer the full matrix using the resultant biases, P and Q
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_u&lt;span style=&#34;color:#eceff4&#34;&gt;[:,&lt;/span&gt;np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;newaxis&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;b_i&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;newaxis&lt;span style=&#34;color:#eceff4&#34;&gt;:,]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;P&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;dot&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;self&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Q&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;T&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can try to apply it to our example mentioned above and see what we would get. Below is a code snippet in Python for running the example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;R &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mf &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; MF&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; K&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; alpha&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0.1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; beta&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0.01&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; iterations&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the matrix obtained from the above process would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4.99&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;3.&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;3.34&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1.01&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4.&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;3.18&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;2.98&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1.01&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1.02&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0.96&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;5.54&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;4.97&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1.&lt;/span&gt;    &lt;span style=&#34;color:#b48ead&#34;&gt;0.6&lt;/span&gt;   &lt;span style=&#34;color:#b48ead&#34;&gt;4.78&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;3.97&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1.53&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1.05&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;4.94&lt;/span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;4.03&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that for existing ratings we have the approximations very close to the true values, and we also get some &amp;lsquo;predictions&amp;rsquo; of the unknown values. In this simple example, we can easily see that $U1$ and $U2$ have similar taste and they both rated $D1$ and $D2$ high, while the rest of the users preferred $D3$, $D4$ and $D5$. When the number of features ($K$ in the Python code) is 2, the algorithm is able to associate the users and items to two different features, and the predictions also follow these associations. For example, we can see that the predicted rating of $U4$ on $D3$ is 4.78, because $U4$ and $U5$ both rated $D4$ high.&lt;/p&gt;
&lt;h2 id=&#34;further-information&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#further-information&#34;&gt;
        #
    &lt;/a&gt;
    Further Information
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;We have discussed the intuitive meaning of the technique of matrix factorization and its use in collaborative filtering. In fact, there are many different extensions to the above technique. An important extension is the requirement that all the elements of the factor matrices $\mathbf{P}$ and $\mathbf{Q}$ in the above example) should be &lt;strong&gt;non-negative&lt;/strong&gt;. In this case it is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Non-negative_matrix_factorization&#34;&gt;non-negative matrix factorization (NMF)&lt;/a&gt;. One advantage of NMF is that it results in intuitive meanings of the resultant matrices. Since no elements are negative, the process of multiplying the resultant matrices to get back the original matrix would not involve subtraction, and can be considered as a process of generating the original data by linear combinations of the latent features.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#source-code&#34;&gt;
        #
    &lt;/a&gt;
    Source Code
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;An example can be found at this &lt;a href=&#34;https://nbviewer.jupyter.org/github/albertauyeung/matrix-factorization-in-python/blob/master/mf.ipynb&#34;&gt;IPython notebok&lt;/a&gt;. It is also available at my Github account in &lt;a href=&#34;https://github.com/albertauyeung/matrix-factorization-in-python&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34; &gt;
&lt;div&gt;
    &lt;a href=&#34;#references&#34;&gt;
        #
    &lt;/a&gt;
    References
&lt;/div&gt;
&lt;/h2&gt;
&lt;p&gt;There have been quite a lot of references on matrix factorization. Below are some of the related papers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gábor Takács et al (2008). &lt;a href=&#34;http://portal.acm.org/citation.cfm?id=1454049&#34;&gt;Matrix factorization and neighbor based algorithms for the Netflix prize problem&lt;/a&gt;In: Proceedings of the 2008 ACM Conference on Recommender Systems, Lausanne, Switzerland, October 23 - 25, 267-274.&lt;/li&gt;
&lt;li&gt;Patrick Ott (2008). &lt;a href=&#34;http://www.comp.leeds.ac.uk/ott/dl/mf_ott.pdf&#34;&gt;Incremental Matrix Factorization for Collaborative Filtering&lt;/a&gt;. Science, Technology and Design 01/2008, Anhalt University of Applied Sciences.&lt;/li&gt;
&lt;li&gt;Daniel D. Lee and H. Sebastian Seung (2001). &lt;a href=&#34;http://hebb.mit.edu/people/seung/papers/nmfconverge.pdf&#34;&gt;Algorithms for Non-negative Matrix Factorization&lt;/a&gt;. Advances in Neural Information Processing Systems 13: Proceedings of the 2000 Conference. MIT Press. pp. 556–562.&lt;/li&gt;
&lt;li&gt;Daniel D. Lee and H. Sebastian Seung (1999). &lt;a href=&#34;http://www.nature.com/nature/journal/v401/n6755/abs/401788a0.html&#34;&gt;Learning the parts of objects by non-negative matrix factorization&lt;/a&gt;. Nature, Vol. 401, No. 6755. (21 October 1999), pp. 788-791.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
